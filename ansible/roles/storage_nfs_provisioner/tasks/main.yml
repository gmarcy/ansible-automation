---

- name: Ensure namespace exists
  kubernetes.core.k8s:
    api_key: "{{ api_key }}"
    kind: Namespace
    kubeconfig: "{{ kubeconfig_path }}"
    name: "{{ nfs_storage_namespace }}"
    state: present
  register: _result

- name: Check for existing StorageClass
  kubernetes.core.k8s_info:
    api_key: "{{ api_key }}"
    api_version: storage.k8s.io/v1
    kind: StorageClass
    kubeconfig: "{{ kubeconfig_path }}"
    name: "{{ nfs_storage_class }}"
  register: _result

- name: Set fact for existing StorageClass
  set_fact:
    nfs_storage_deployed: "{{ (_result.resources | length > 0) and (_result.resources[0].volumeBindingMode == 'Immediate') }}"

- block:

    - name: Create the PVC for NFS storage from local storage
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: v1
        definition:
          spec:
            storageClassName: "{{ local_storage_class }}"
            accessModes: [ ReadWriteOnce ]
            resources:
              requests:
                storage: 200Gi
        kind: PersistentVolumeClaim
        kubeconfig: "{{ kubeconfig_path }}"
        name: nfs-local-storage-claim
        namespace: "{{ nfs_storage_namespace }}"
      register: _result

    - name: Wait for PersistentVolumeClaim to be created
      kubernetes.core.k8s_info:
        api_key: "{{ api_key }}"
        api_version: v1
        kind: PersistentVolumeClaim
        kubeconfig: "{{ kubeconfig_path }}"
        name: nfs-local-storage-claim
        namespace: "{{ nfs_storage_namespace }}"
      register: _result
      delay: 10
      retries: 24
      until: (_result.resources | length > 0) and (_result.resources[0].status.phase in ['Bound', 'Pending'])

    - name: Create nfs-provisioner service account
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        kind: ServiceAccount
        kubeconfig: "{{ kubeconfig_path }}"
        name: nfs-provisioner
        namespace: "{{ nfs_storage_namespace }}"
      register: _result

    - name: Create the security context constraints
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: security.openshift.io/v1
        definition:
          allowHostDirVolumePlugin: true
          allowHostIPC: false
          allowHostNetwork: false
          allowHostPID: false
          allowHostPorts: false
          allowPrivilegeEscalation: true
          allowPrivilegedContainer: false
          allowedCapabilities:
          - SYS_RESOURCE
          - DAC_READ_SEARCH
          fsGroup:
            type: MustRunAs
          groups: []
          readOnlyRootFilesystem: false
          requiredDropCapabilities:
          - KILL
          - MKNOD
          - SYS_CHROOT
          runAsUser:
            type: RunAsAny
          seLinuxContext:
            type: MustRunAs
          supplementalGroups:
            type: RunAsAny
          users:
          - system:serviceaccount:nfs-storage:nfs-provisioner
          volumes:
          - configMap
          - downwardAPI
          - emptyDir
          - hostPath
          - persistentVolumeClaim
          - secret
        kind: SecurityContextConstraints
        kubeconfig: "{{ kubeconfig_path }}"
        name: nfs-provisioner
      register: _result

    - name: Wait for SecurityContextConstraints to be created
      kubernetes.core.k8s_info:
        api_key: "{{ api_key }}"
        api_version: security.openshift.io/v1
        kind: SecurityContextConstraints
        kubeconfig: "{{ kubeconfig_path }}"
        name: nfs-provisioner
      register: _result
      delay: 10
      retries: 24
      until: (_result.resources | length > 0) and (_result.resources[0].runAsUser.type == 'RunAsAny')
    
    - name: Apply the pod security policy
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: extensions/v1beta1
        definition:
          spec:
            fsGroup:
              rule: RunAsAny
            allowedCapabilities:
            - DAC_READ_SEARCH
            - SYS_RESOURCE
            runAsUser:
              rule: RunAsAny
            seLinux:
              rule: RunAsAny
            supplementalGroups:
              rule: RunAsAny
            volumes:
            - configMap
            - downwardAPI
            - emptyDir
            - persistentVolumeClaim
            - secret
            - hostPath
        kind: PodSecurityPolicy
        kubeconfig: "{{ kubeconfig_path }}"
        name: nfs-provisioner
      register: _result
      when: openshift_distro not in ['okd','ocp']

    - name: Wait for PodSecurityPolicy to be created
      kubernetes.core.k8s_info:
        api_key: "{{ api_key }}"
        api_version: extensions/v1beta1
        kind: PodSecurityPolicy
        kubeconfig: "{{ kubeconfig_path }}"
        name: nfs-provisioner
      register: _result
      delay: 10
      retries: 24
      until: (_result.resources | length > 0) and (_result.resources[0].runAsUser.type == 'RunAsAny')
      when: openshift_distro not in ['okd','ocp']

    - name: Create the cluster role
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: rbac.authorization.k8s.io/v1
        definition:
          rules:
            - apiGroups: [""]
              resources: ["persistentvolumes"]
              verbs: ["get", "list", "watch", "create", "delete"]
            - apiGroups: [""]
              resources: ["persistentvolumeclaims"]
              verbs: ["get", "list", "watch", "update"]
            - apiGroups: ["storage.k8s.io"]
              resources: ["storageclasses"]
              verbs: ["get", "list", "watch"]
            - apiGroups: [""]
              resources: ["events"]
              verbs: ["create", "update", "patch"]
            - apiGroups: [""]
              resources: ["services", "endpoints"]
              verbs: ["get"]
            - apiGroups: ["extensions"]
              resources: ["podsecuritypolicies"]
              resourceNames: ["nfs-provisioner"]
              verbs: ["use"]
        kind: ClusterRole
        kubeconfig: "{{ kubeconfig_path }}"
        name: nfs-provisioner-runner
        namespace: "{{ nfs_storage_namespace }}"
      register: _result

    - name: Create the cluster role binding
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: rbac.authorization.k8s.io/v1
        definition:
          subjects:
            - kind: ServiceAccount
              name: nfs-provisioner
              namespace: "{{ nfs_storage_namespace }}"
          roleRef:
            kind: ClusterRole
            name: nfs-provisioner-runner
            apiGroup: rbac.authorization.k8s.io
        kind: ClusterRoleBinding
        kubeconfig: "{{ kubeconfig_path }}"
        name: run-nfs-provisioner
        namespace: "{{ nfs_storage_namespace }}"
      register: _result

    - name: Create the role
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: rbac.authorization.k8s.io/v1
        definition:
          rules:
            - apiGroups: [""]
              resources: ["endpoints"]
              verbs: ["get", "list", "watch", "create", "update", "patch"]
        kind: Role
        kubeconfig: "{{ kubeconfig_path }}"
        name: leader-locking-nfs-provisioner
        namespace: "{{ nfs_storage_namespace }}"
      register: _result

    - name: Create the role binding
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: rbac.authorization.k8s.io/v1
        definition:
          subjects:
            - kind: ServiceAccount
              name: nfs-provisioner
              namespace: "{{ nfs_storage_namespace }}"
          roleRef:
            kind: Role
            name: leader-locking-nfs-provisioner
            apiGroup: rbac.authorization.k8s.io
        kind: RoleBinding
        kubeconfig: "{{ kubeconfig_path }}"
        name: leader-locking-nfs-provisioner
        namespace: "{{ nfs_storage_namespace }}"
      register: _result

    - name: Set fact for deployment or statefulset
      set_fact:
        type_recreate:
          type: "{{ 'Recreate' if not (nfs_provisioner_use_statefulset | default(false)) else omit }}"

    - name: Set facts for deployment or statefulset
      set_fact:
        service_name: "{{ 'nfs-provisioner' if (nfs_provisioner_use_statefulset | default(false)) else omit }}"
        strategy_recreate: "{{ type_recreate if (type_recreate | dict2items | length > 0) else omit }}"

    - name: Apply the deployment or statefulset
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: apps/v1
        definition:
          spec:
            selector:
              matchLabels:
                app: nfs-provisioner
            replicas: 1
            serviceName: "{{ service_name | default(omit) }}"
            strategy: "{{ strategy_recreate | default(omit) }}"
            template:
              metadata:
                labels:
                  app: nfs-provisioner
              spec:
                serviceAccount: nfs-provisioner
                terminationGracePeriodSeconds: 10
                containers:
                  - name: nfs-provisioner
                    image: k8s.gcr.io/sig-storage/nfs-provisioner:v3.0.0
                    ports:
                      - name: nfs
                        containerPort: 2049
                      - name: nfs-udp
                        containerPort: 2049
                        protocol: UDP
                      - name: nlockmgr
                        containerPort: 32803
                      - name: nlockmgr-udp
                        containerPort: 32803
                        protocol: UDP
                      - name: mountd
                        containerPort: 20048
                      - name: mountd-udp
                        containerPort: 20048
                        protocol: UDP
                      - name: rquotad
                        containerPort: 875
                      - name: rquotad-udp
                        containerPort: 875
                        protocol: UDP
                      - name: rpcbind
                        containerPort: 111
                      - name: rpcbind-udp
                        containerPort: 111
                        protocol: UDP
                      - name: statd
                        containerPort: 662
                      - name: statd-udp
                        containerPort: 662
                        protocol: UDP
                    securityContext:
                      capabilities:
                        add:
                          - DAC_READ_SEARCH
                          - SYS_RESOURCE
                    args:
                      - -provisioner={{ nfs_provisioner }}
                    env:
                      - name: POD_IP
                        valueFrom:
                          fieldRef:
                            fieldPath: status.podIP
                      - name: SERVICE_NAME
                        value: nfs-provisioner
                      - name: POD_NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                    imagePullPolicy: IfNotPresent
                    volumeMounts:
                      - name: export-volume
                        mountPath: /export
                volumes:
                  - name: export-volume
                    persistentVolumeClaim:
                      claimName: nfs-local-storage-claim
        kind: "{{ 'StatefulSet' if (nfs_provisioner_use_statefulset | default(false)) else 'Deployment' }}"
        kubeconfig: "{{ kubeconfig_path }}"
        name: nfs-provisioner
        namespace: "{{ nfs_storage_namespace }}"
      register: _result
    
    - name: Check that Deployment or StatefulSet has been created
      kubernetes.core.k8s_info:
        api_key: "{{ api_key }}"
        api_version: apps/v1
        kind: "{{ 'StatefulSet' if (nfs_provisioner_use_statefulset | default(false)) else 'Deployment' }}"
        kubeconfig: "{{ kubeconfig_path }}"
        name: nfs-provisioner
        namespace: "{{ nfs_storage_namespace }}"
        wait: true
        wait_condition:
          type: Available
      register: _result
    
    - name: Apply the service.yaml
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: v1
        definition:
          metadata:
            labels:
              app: nfs-provisioner
          spec:
            ports:
              - name: nfs
                port: 2049
              - name: nfs-udp
                port: 2049
                protocol: UDP
              - name: nlockmgr
                port: 32803
              - name: nlockmgr-udp
                port: 32803
                protocol: UDP
              - name: mountd
                port: 20048
              - name: mountd-udp
                port: 20048
                protocol: UDP
              - name: rquotad
                port: 875
              - name: rquotad-udp
                port: 875
                protocol: UDP
              - name: rpcbind
                port: 111
              - name: rpcbind-udp
                port: 111
                protocol: UDP
              - name: statd
                port: 662
              - name: statd-udp
                port: 662
                protocol: UDP
            selector:
              app: nfs-provisioner
        kind: Service
        kubeconfig: "{{ kubeconfig_path }}"
        name: nfs-provisioner
        namespace: "{{ nfs_storage_namespace }}"
      register: _result
    
    - name: Check that Service has been created
      kubernetes.core.k8s_info:
        api_key: "{{ api_key }}"
        label_selectors:
        - app=nfs-provisioner
        kind: Service
        kubeconfig: "{{ kubeconfig_path }}"
        name: nfs-provisioner
        namespace: "{{ nfs_storage_namespace }}"
      register: _result
    
    - name: Create the storage class
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: storage.k8s.io/v1
        definition:
          provisioner: "{{ nfs_provisioner }}"
          mountOptions:
            - vers=4.1
        kind: StorageClass
        kubeconfig: "{{ kubeconfig_path }}"
        name: "{{ nfs_storage_class }}"
      register: _result
    
    - name: Check that StorageClass has been created
      kubernetes.core.k8s_info:
        api_key: "{{ api_key }}"
        api_version: storage.k8s.io/v1
        kind: StorageClass
        kubeconfig: "{{ kubeconfig_path }}"
        name: "{{ nfs_storage_class }}"
      register: _result
      delay: 10
      retries: 24
      until: (_result.resources | length > 0) and (_result.resources[0].volumeBindingMode == 'Immediate')

  when: not nfs_storage_deployed
