---

- name: Set _ssh_target fact
  ansible.builtin.set_fact:
    _ssh_target: "{{ hostvars[inventory_hostname].ansible_ssh_user }}@{{ hostvars[inventory_hostname].ansible_host }}"

- name: Set _ssh_command fact
  ansible.builtin.set_fact:
    _ssh_command: "ssh {{ hostvars[inventory_hostname].ansible_ssh_common_args }} {{ hostvars[inventory_hostname].ansible_ssh_extra_args | default() }} {{ _ssh_target }}"

- name: Confirm that we can run ssh to inventory_hostname
  ansible.builtin.command: |
    {{ _ssh_command }} echo connected
  register: _result_ssh
  failed_when: _result_ssh is not defined
  changed_when: false
  delegate_to: localhost

- name: Provide informative message if ssh connect fails
  ansible.builtin.fail:
    msg: "ansible setup requires ssh remote access to {{ _ssh_target }}"
  when: _result_ssh.stdout != 'connected'

- name: Confirm that we can run ssh to inventory_hostname, and sudo without a password
  ansible.builtin.command: |
    {{ _ssh_command }} sudo echo sudoer
  register: _result_sudo
  failed_when: _result_sudo is not defined
  changed_when: false
  delegate_to: localhost

- name: Provide informative message if sudo on ssh connect fails
  ansible.builtin.fail:
    msg: "ansible setup requires being able to run sudo for {{ _ssh_target }}"
  when: _result_sudo.stdout != 'sudoer'

- name: Confirm that we can run ssh to inventory_hostname, sudo without a password, and the python interpreter is present
  ansible.builtin.command: |
    {{ _ssh_command }} sudo ls {{ ansible_python_interpreter }}
  register: _result_python_present
  failed_when: _result_python_present is not defined
  changed_when: false
  delegate_to: localhost

- name: If we couldn't find python interpreter try to install it using ssh and sudo
  block:

    - name: Provide informative message if python not present on remote host
      ansible.builtin.debug:
        msg: "ansible setup requires that {{ ansible_python_interpreter }} be installed for {{ _ssh_target }}, will attempt to install it remotely."

    - name: Fetch contents of /etc/os-release
      ansible.builtin.command: |
        {{ _ssh_command }} cat /etc/os-release
      register: _result_os_release
      changed_when: "_result_os_release.rc == 0"
      delegate_to: localhost

    - name: Run python install
      ansible.builtin.command: |
        {{ _ssh_command }} sudo {{ python_package_manager }} install -y {{ python_package }}
      register: _result_python_install
      changed_when: "_result_python_install.rc == 0"
      vars:
        python_package_manager: "{{ 'dnf' if (_result_os_release.stdout is match('.*[Cc][Ee][Nn][Tt][Oo][Ss].*')) else 'apt-get' }}"
        python_package: "{{ 'python39' if (_result_os_release.stdout is match('.*[Cc][Ee][Nn][Tt][Oo][Ss].*')) else 'python3' }}"
      delegate_to: localhost

    - name: Reconfirm that we can run ssh to inventory_hostname, sudo without a password, and the python interpreter is present
      ansible.builtin.command: |
        {{ _ssh_command }} sudo ls {{ ansible_python_interpreter }}
      register: _result_python_present_recheck
      failed_when: _result_python_present_recheck is not defined
      changed_when: "_result_python_present_recheck.rc == 0"
      delegate_to: localhost

    - name: Provide informative message if python not present on remote host
      ansible.builtin.fail:
        msg: "ansible setup requires that {{ ansible_python_interpreter }} be installed for {{ _ssh_target }}"
      when: _result_python_present_recheck.stdout != ansible_python_interpreter

  when: _result_python_present.stdout != ansible_python_interpreter

- name: Confirm that we have ansible host connectivity
  ansible.builtin.ping:
