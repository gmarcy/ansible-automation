---

- name: Check for existing ingress-nginx-controller
  kubernetes.core.k8s_info:
    api_key: "{{ api_key | default(omit) }}"
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: apps/v1
    kind: Deployment
    name: ingress-nginx-controller
    namespace: "{{ target_namespace }}"
  register: _result

- name: Set fact if ingress-nginx is already running
  set_fact:
    ingress_nginx_running: "{{ _result.resources | map(attribute='status.conditions') | flatten | selectattr('type','equalto','Available') | selectattr('status','equalto','True') | length > 0 }}"

- when: not ingress_nginx_running
  block:

    - name: Add labels to target_namespace Namespace
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Namespace
        name: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
      register: _result

    - name: Create the ingress-nginx ServiceAccount
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: ServiceAccount
        name: ingress-nginx
        namespace: "{{ target_namespace }}"
        definition:
          automountServiceAccountToken: true
          metadata:
            labels:
              app.kubernetes.io/component: controller
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
      register: _result

    - name: Create the ingress-nginx-admission ServiceAccount
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: ServiceAccount
        name: ingress-nginx-admission
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              app.kubernetes.io/component: admission-webhook
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
      register: _result

    - name: Create the ingress-nginx Role
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: rbac.authorization.k8s.io/v1
        kind: Role
        name: ingress-nginx
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              app.kubernetes.io/component: controller
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          rules:
          - apiGroups:
            - ""
            resources:
            - namespaces
            verbs:
            - get
          - apiGroups:
            - ""
            resources:
            - configmaps
            - pods
            - secrets
            - endpoints
            verbs:
            - get
            - list
            - watch
          - apiGroups:
            - ""
            resources:
            - services
            verbs:
            - get
            - list
            - watch
          - apiGroups:
            - networking.k8s.io
            resources:
            - ingresses
            verbs:
            - get
            - list
            - watch
          - apiGroups:
            - networking.k8s.io
            resources:
            - ingresses/status
            verbs:
            - update
          - apiGroups:
            - networking.k8s.io
            resources:
            - ingressclasses
            verbs:
            - get
            - list
            - watch
          - apiGroups:
            - ""
            resourceNames:
            - ingress-nginx-leader
            resources:
            - configmaps
            verbs:
            - get
            - update
          - apiGroups:
            - ""
            resources:
            - configmaps
            verbs:
            - create
          - apiGroups:
            - coordination.k8s.io
            resourceNames:
            - ingress-nginx-leader
            resources:
            - leases
            verbs:
            - get
            - update
          - apiGroups:
            - coordination.k8s.io
            resources:
            - leases
            verbs:
            - create
          - apiGroups:
            - ""
            resources:
            - events
            verbs:
            - create
            - patch
          - apiGroups:
            - discovery.k8s.io
            resources:
            - endpointslices
            verbs:
            - list
            - watch
            - get
      register: _result

    - name: Create the ingress-nginx-admission Role
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: rbac.authorization.k8s.io/v1
        kind: Role
        name: ingress-nginx-admission
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              app.kubernetes.io/component: admission-webhook
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          rules:
          - apiGroups:
            - ""
            resources:
            - secrets
            verbs:
            - get
            - create
      register: _result

    - name: Create the ingress-nginx ClusterRole
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        name: ingress-nginx
        definition:
          metadata:
            labels:
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          rules:
          - apiGroups:
            - ""
            resources:
            - configmaps
            - endpoints
            - nodes
            - pods
            - secrets
            - namespaces
            verbs:
            - list
            - watch
          - apiGroups:
            - coordination.k8s.io
            resources:
            - leases
            verbs:
            - list
            - watch
          - apiGroups:
            - ""
            resources:
            - nodes
            verbs:
            - get
          - apiGroups:
            - ""
            resources:
            - services
            verbs:
            - get
            - list
            - watch
          - apiGroups:
            - networking.k8s.io
            resources:
            - ingresses
            verbs:
            - get
            - list
            - watch
          - apiGroups:
            - ""
            resources:
            - events
            verbs:
            - create
            - patch
          - apiGroups:
            - networking.k8s.io
            resources:
            - ingresses/status
            verbs:
            - update
          - apiGroups:
            - networking.k8s.io
            resources:
            - ingressclasses
            verbs:
            - get
            - list
            - watch
          - apiGroups:
            - discovery.k8s.io
            resources:
            - endpointslices
            verbs:
            - list
            - watch
            - get
      register: _result

    - name: Create the ingress-nginx-admission ClusterRole
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        name: ingress-nginx-admission
        definition:
          metadata:
            labels:
              app.kubernetes.io/component: admission-webhook
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          rules:
          - apiGroups:
            - admissionregistration.k8s.io
            resources:
            - validatingwebhookconfigurations
            verbs:
            - get
            - update
      register: _result

    - name: Create the ingress-nginx RoleBinding
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        name: ingress-nginx
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              app.kubernetes.io/component: controller
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: ingress-nginx
          subjects:
          - kind: ServiceAccount
            name: ingress-nginx
            namespace: "{{ target_namespace }}"
      register: _result

    - name: Create the ingress-nginx-admission RoleBinding
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        name: ingress-nginx-admission
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              app.kubernetes.io/component: admission-webhook
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: ingress-nginx-admission
          subjects:
          - kind: ServiceAccount
            name: ingress-nginx-admission
            namespace: "{{ target_namespace }}"
      register: _result

    - name: Create the ingress-nginx ClusterRoleBinding
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        name: ingress-nginx
        definition:
          metadata:
            labels:
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: ingress-nginx
          subjects:
          - kind: ServiceAccount
            name: ingress-nginx
            namespace: "{{ target_namespace }}"
      register: _result

    - name: Create the ingress-nginx-admission ClusterRoleBinding
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        name: ingress-nginx-admission
        definition:
          metadata:
            labels:
              app.kubernetes.io/component: admission-webhook
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: ingress-nginx-admission
          subjects:
          - kind: ServiceAccount
            name: ingress-nginx-admission
            namespace: "{{ target_namespace }}"
      register: _result

    - name: Create the ingress-nginx-controller ConfigMap
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: ConfigMap
        name: ingress-nginx-controller
        namespace: "{{ target_namespace }}"
        definition:
          data:
            allow-snippet-annotations: "true"
          metadata:
            labels:
              app.kubernetes.io/component: controller
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
      register: _result

    - name: Set fect for controller service ports
      set_fact:
        controller_service_ports:
        - appProtocol: http
          name: http
          port: 80
          protocol: TCP
          targetPort: http
          nodePort: "{{ hostvars[groups['infra_node'][0]]['http_node_port'] | int }}"
        - appProtocol: https
          name: https
          port: 443
          protocol: TCP
          targetPort: https
          nodePort: "{{ hostvars[groups['infra_node'][0]]['https_node_port'] | int }}"

    - name: Create the ingress-nginx-controller Service
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Service
        name: ingress-nginx-controller
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              app.kubernetes.io/component: controller
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          spec:
            #externalTrafficPolicy: Local
            ipFamilies:
            - IPv4
            ipFamilyPolicy: SingleStack
            ports: "{{ controller_service_ports }}"
            selector:
              app.kubernetes.io/component: controller
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
            type: NodePort
            #type: LoadBalancer
      register: _result

    - name: Create the ingress-nginx-controller-admission Service
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Service
        name: ingress-nginx-controller-admission
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              app.kubernetes.io/component: controller
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          spec:
            ports:
            - appProtocol: https
              name: https-webhook
              port: 443
              targetPort: webhook
            selector:
              app.kubernetes.io/component: controller
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
            type: ClusterIP
      register: _result

    - name: Create the ingress-nginx-controller Deployment
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: apps/v1
        kind: Deployment
        name: ingress-nginx-controller
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              app.kubernetes.io/component: controller
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          spec:
            minReadySeconds: 0
            revisionHistoryLimit: 10
            selector:
              matchLabels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
            template:
              metadata:
                labels:
                  app.kubernetes.io/component: controller
                  app.kubernetes.io/instance: ingress-nginx
                  app.kubernetes.io/name: ingress-nginx
              spec:
                containers:
                - args:
                  - /nginx-ingress-controller
                  #- --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
                  - --election-id=ingress-nginx-leader
                  - --controller-class=k8s.io/ingress-nginx
                  - --ingress-class=nginx
                  - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
                  - --validating-webhook=:8443
                  - --validating-webhook-certificate=/usr/local/certificates/cert
                  - --validating-webhook-key=/usr/local/certificates/key
                  env:
                  - name: POD_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.name
                  - name: POD_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                  - name: LD_PRELOAD
                    value: /usr/local/lib/libmimalloc.so
                  image: registry.k8s.io/ingress-nginx/controller:v1.5.1@sha256:4ba73c697770664c1e00e9f968de14e08f606ff961c76e5d7033a4a9c593c629
                  imagePullPolicy: IfNotPresent
                  lifecycle:
                    preStop:
                      exec:
                        command:
                        - /wait-shutdown
                  livenessProbe:
                    failureThreshold: 5
                    httpGet:
                      path: /healthz
                      port: 10254
                      scheme: HTTP
                    initialDelaySeconds: 10
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 1
                  name: controller
                  ports:
                  - containerPort: 80
                    name: http
                    protocol: TCP
                  - containerPort: 443
                    name: https
                    protocol: TCP
                  - containerPort: 8443
                    name: webhook
                    protocol: TCP
                  readinessProbe:
                    failureThreshold: 3
                    httpGet:
                      path: /healthz
                      port: 10254
                      scheme: HTTP
                    initialDelaySeconds: 10
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 1
                  resources:
                    requests:
                      cpu: 100m
                      memory: 90Mi
                  securityContext:
                    allowPrivilegeEscalation: true
                    capabilities:
                      add:
                      - NET_BIND_SERVICE
                      drop:
                      - ALL
                    runAsUser: 101
                  volumeMounts:
                  - mountPath: /usr/local/certificates/
                    name: webhook-cert
                    readOnly: true
                dnsPolicy: ClusterFirst
                nodeSelector:
                  kubernetes.io/os: linux
                serviceAccountName: ingress-nginx
                terminationGracePeriodSeconds: 300
                volumes:
                - name: webhook-cert
                  secret:
                    secretName: ingress-nginx-admission
      register: _result

    - name: Create the ingress-nginx-admission-create Job
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: batch/v1
        kind: Job
        name: ingress-nginx-admission-create
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              app.kubernetes.io/component: admission-webhook
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          spec:
            template:
              metadata:
                labels:
                  app.kubernetes.io/component: admission-webhook
                  app.kubernetes.io/instance: ingress-nginx
                  app.kubernetes.io/name: ingress-nginx
                  app.kubernetes.io/part-of: ingress-nginx
                  app.kubernetes.io/version: 1.5.1
                name: ingress-nginx-admission-create
              spec:
                containers:
                - args:
                  - create
                  - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
                  - --namespace=$(POD_NAMESPACE)
                  - --secret-name=ingress-nginx-admission
                  env:
                  - name: POD_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                  image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20220916-gd32f8c343@sha256:39c5b2e3310dc4264d638ad28d9d1d96c4cbb2b2dcfb52368fe4e3c63f61e10f
                  imagePullPolicy: IfNotPresent
                  name: create
                  securityContext:
                    allowPrivilegeEscalation: false
                nodeSelector:
                  kubernetes.io/os: linux
                restartPolicy: OnFailure
                securityContext:
                  fsGroup: 2000
                  runAsNonRoot: true
                  runAsUser: 2000
                serviceAccountName: ingress-nginx-admission
      register: _result

    - name: Create the ingress-nginx-admission-patch Job
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: batch/v1
        kind: Job
        name: ingress-nginx-admission-patch
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              app.kubernetes.io/component: admission-webhook
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          spec:
            template:
              metadata:
                labels:
                  app.kubernetes.io/component: admission-webhook
                  app.kubernetes.io/instance: ingress-nginx
                  app.kubernetes.io/name: ingress-nginx
                  app.kubernetes.io/part-of: ingress-nginx
                  app.kubernetes.io/version: 1.5.1
                name: ingress-nginx-admission-patch
              spec:
                containers:
                - args:
                  - patch
                  - --webhook-name=ingress-nginx-admission
                  - --namespace=$(POD_NAMESPACE)
                  - --patch-mutating=false
                  - --secret-name=ingress-nginx-admission
                  - --patch-failure-policy=Fail
                  env:
                  - name: POD_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                  image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20220916-gd32f8c343@sha256:39c5b2e3310dc4264d638ad28d9d1d96c4cbb2b2dcfb52368fe4e3c63f61e10f
                  imagePullPolicy: IfNotPresent
                  name: patch
                  securityContext:
                    allowPrivilegeEscalation: false
                nodeSelector:
                  kubernetes.io/os: linux
                restartPolicy: OnFailure
                securityContext:
                  fsGroup: 2000
                  runAsNonRoot: true
                  runAsUser: 2000
                serviceAccountName: ingress-nginx-admission
      register: _result

    - name: Create the nginx IngressClass
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: networking.k8s.io/v1
        kind: IngressClass
        name: nginx
        definition:
          metadata:
            labels:
              app.kubernetes.io/component: controller
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          spec:
            controller: k8s.io/ingress-nginx
      register: _result

    - name: Create the ingress-nginx-admission ValidatingWebhookConfiguration
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: admissionregistration.k8s.io/v1
        kind: ValidatingWebhookConfiguration
        name: ingress-nginx-admission
        definition:
          metadata:
            labels:
              app.kubernetes.io/component: admission-webhook
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/part-of: ingress-nginx
              app.kubernetes.io/version: 1.5.1
          webhooks:
          - admissionReviewVersions:
            - v1
            clientConfig:
              service:
                name: ingress-nginx-controller-admission
                namespace: "{{ target_namespace }}"
                path: /networking/v1/ingresses
            failurePolicy: Fail
            matchPolicy: Equivalent
            name: validate.nginx.ingress.kubernetes.io
            rules:
            - apiGroups:
              - networking.k8s.io
              apiVersions:
              - v1
              operations:
              - CREATE
              - UPDATE
              resources:
              - ingresses
            sideEffects: None
      register: _result
