---

- name: Check if we already have the redhat-operators source
  kubernetes.core.k8s_info:
    api_key: "{{ api_key | default(omit) }}"
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: config.openshift.io/v1
    kind: OperatorHub
    name: cluster
  register: _result

- name: Set fact for redhat-operators source
  set_fact:
    redhat_operators_disabled: "{{ item.disabled }}"
  loop: "{{ _result.resources[0].status.sources }}"
  when: item.name == 'redhat-operators'

- name: Update the OperatorHub if it does not have the redhat-operators catalog
  kubernetes.core.k8s:
    api_key: "{{ api_key | default(omit) }}"
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: config.openshift.io/v1
    definition:
      spec:
        sources:
          - disabled: false
            name: community-operators
          - disabled: false
            name: redhat-operators
    kind: OperatorHub
    name: cluster
  register: _result
  when: redhat_operators_disabled

- name: Ensure namespace exists
  kubernetes.core.k8s:
    api_key: "{{ api_key | default(omit) }}"
    kubeconfig: "{{ kubeconfig_path }}"
    kind: Namespace
    name: "{{ local_storage_namespace }}"
    state: present
  register: _result

- name: Check for existing PersistentVolumes
  kubernetes.core.k8s_info:
    api_key: "{{ api_key | default(omit) }}"
    kubeconfig: "{{ kubeconfig_path }}"
    kind: PersistentVolume
    label_selectors:
    - storage.openshift.com/owner-kind=LocalVolumeSet
    - storage.openshift.com/owner-name=filesystem-local-volume-set
    - storage.openshift.com/owner-namespace={{ local_storage_namespace }}
  register: _result

- name: Set fact for existing PersistentVolumes
  set_fact:
    local_storage_deployed: "{{ (_result.resources | length > 0) and ((_result.resources | map(attribute='status.phase') | unique) is subset(['Available', 'Bound'])) }}"

- block:

    - name: Apply the local-storage-operator.yaml
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        template: local-storage-operator.yaml.j2
      register: _result
    
    - name: Wait until all pods are ready
      kubernetes.core.k8s_info:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Pod
        namespace: "{{ local_storage_namespace }}"
        wait: true
        wait_condition:
          type: Ready
      register: _result
    
    - name: Wait until the ClusterServiceVersions are ready
      kubernetes.core.k8s_info:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        label_selectors:
        - operators.coreos.com/local-storage-operator.{{ local_storage_namespace }}=
        namespace: "{{ local_storage_namespace }}"
      register: _result
      delay: 10
      retries: 24
      until: (_result.resources | length > 0) and (_result.resources | map(attribute='status.phase') | unique == ['Succeeded'])
    
    - name: Apply the auto-discover-devices.yaml
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        template: auto-discover-devices.yaml.j2
        wait: true
        wait_condition:
          type: Available
      register: _result
    
    - name: Wait for discovery results
      kubernetes.core.k8s_info:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: local.storage.openshift.io/v1alpha1
        kind: LocalVolumeDiscoveryResult
        namespace: "{{ local_storage_namespace }}"
      register: _result
      delay: 10
      retries: 24
      until: (_result.resources | length > 0) and (_result.resources | map(attribute='status.discoveredDevices') | length == _result.resources | length)
    
    - name: Create tuples for hostnames and devices
      set_fact:
        discovered_drives: "{{ (discovered_drives | default([])) + [item[0]] | product(item[1]) }}"
      loop: "{{ _result.resources | map(attribute='spec.nodeName') | zip(_result.resources | map(attribute='status.discoveredDevices')) }}"
    
    - name: Find available disk drives
      set_fact:
        nodes_with_available_disks: "{{ nodes_with_available_disks | default([]) | union([item[0]]) }}"
        available_disks: "{{ available_disks | default([]) | union([item]) }}"
      loop: "{{ discovered_drives }}"
      when: item[1].status.state == 'Available'
    
    - name: Stop if there are no available disks
      assert:
        that: available_disks | default([]) | length > 0
    
    - name: Apply the local-volume-set.yaml
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        template: local-volume-set.yaml.j2
      register: _result
    
    - name: Wait for StorageClass to be created
      kubernetes.core.k8s_info:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: storage.k8s.io/v1
        kind: StorageClass
        label_selectors:
        - local.storage.openshift.io/owner-name=filesystem-local-volume-set
        - local.storage.openshift.io/owner-namespace={{ local_storage_namespace }}
        name: "{{ local_storage_class }}"
      register: _result
      delay: 10
      retries: 24
      until: (_result.resources | length > 0) and (_result.resources[0].volumeBindingMode == 'WaitForFirstConsumer')
    
    - name: Wait for PersistentVolumes to be created
      kubernetes.core.k8s_info:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        kind: PersistentVolume
        label_selectors:
        - storage.openshift.com/owner-kind=LocalVolumeSet
        - storage.openshift.com/owner-name=filesystem-local-volume-set
        - storage.openshift.com/owner-namespace={{ local_storage_namespace }}
      register: _result
      delay: 10
      retries: 24
      until: (_result.resources | length > 0) and ((_result.resources | map(attribute='status.phase') | unique) is subset(['Available', 'Bound']))

  when: not local_storage_deployed
