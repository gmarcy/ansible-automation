---

- name: Check for existing cluster-registry
  kubernetes.core.k8s_info:
    api_key: "{{ api_key | default(omit) }}"
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: apps/v1
    kind: Deployment
    name: cluster-registry
    namespace: "{{ target_namespace }}"
  register: _result

- name: Set fact if cluster-registry is already running
  set_fact:
    registry_running: "{{ _result.resources | map(attribute='status.conditions') | flatten | selectattr('type','equalto','Available') | selectattr('status','equalto','True') | length > 0 }}"

- when: not registry_running
  block:

    - name: Create the PVC for the registry image storage
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: PersistentVolumeClaim
        name: registry-image-storage
        namespace: "{{ target_namespace }}"
        definition:
          spec:
            accessModes:
              - ReadWriteMany
            resources:
              requests:
                storage: 50Gi
      register: _result

    - name: Create the cluster-registry Deployment
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: apps/v1
        kind: Deployment
        name: cluster-registry
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              k8s-app: cluster-registry
          spec:
            replicas: 1
            selector:
              matchLabels:
                k8s-app: cluster-registry
            template:
              metadata:
                labels:
                  k8s-app: cluster-registry
              spec:
                containers:
                  - name: cluster-registry
                    image: registry:2
                    env:
                      - name: REGISTRY_HTTP_ADDR
                        value: ":5000"
                      - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
                        value: "/var/lib/registry"
                    ports:
                    - name: http
                      containerPort: 5000
                    volumeMounts:
                    - name: image-store
                      mountPath: "/var/lib/registry"
                volumes:
                  - name: image-store
                    persistentVolumeClaim:
                      claimName: registry-image-storage
          register: _result

    - name: Create the cluster-registry Service
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Service
        name: cluster-registry
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              k8s-app: cluster-registry
          spec:
            ports:
              - name: http
                port: 5000
                targetPort: 5000
            selector:
              k8s-app: cluster-registry
      register: _result

    - name: Create the cluster-registry Ingress
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: networking.k8s.io/v1
        kind: Ingress
        name: cluster-registry
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              k8s-app: cluster-registry
            annotations:
              nginx.ingress.kubernetes.io/proxy-body-size: "0"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
              nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
          spec:
            ingressClassName: nginx
            rules:
            - host: "{{ 'registry.' + hostvars['cluster-facts']['cluster_publicip'] + '.nip.io' }}"
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: cluster-registry
                        port:
                          number: 5000
      register: _result
