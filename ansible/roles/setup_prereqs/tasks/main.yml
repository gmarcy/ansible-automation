---

- name: Install the jq package if it is missing
  package:
    name: jq

- name: Add line to /etc/hosts for master node public ip address
  lineinfile:
    path: /etc/hosts
    line: "{{ host_vars.ansible_host }} {{ host_vars.fqdn }} {{ host_vars.short_hostname }}"
    insertbefore: "{{ '^' + host_vars.privateip + ' .*' }}"
    firstmatch: true
  vars:
    host_vars: "{{ hostvars[inventory_hostname] }}"

- name: Disable selinux
  command: setenforce 0
  register: _result
  when: hostvars[inventory_hostname].distribution_family == 'CentOS'

- name: Replace line in /etc/sysconfig/selinux to disable SELINUX for master node
  lineinfile:
    path: /etc/sysconfig/selinux
    line: 'SELINUX=disabled'
    regex: '^SELINUX=enforcing'
    firstmatch: true
  when: hostvars[inventory_hostname].distribution_family == 'CentOS'

- name: Update package cache
  apt:
    update_cache: true
    cache_valid_time: 3600
  when: hostvars[inventory_hostname].distribution_family == 'Debian'

- name: Install firewalld
  apt:
    name: firewalld
  when: hostvars[inventory_hostname].distribution_family == 'Debian'

- name: Run firewall-offline-cmd to list existing rules
  command: firewall-offline-cmd --list-all
  register: _result
  changed_when: _result is not defined

- name: Set fact for ports we want the firewall to allow
  set_fact:
    firewall_ports:
      - '6443/tcp'
      - '2379-2380/tcp'
      - '10250/tcp'
      - '10251/tcp'
      - '10252/tcp'
      - '10255/tcp'


- name: Set fact if we have already added the ports
  set_fact:
    firewall_configured: "{{ ports | symmetric_difference(firewall_ports) | length == 0 }}"
  loop: "{{ _result.stdout_lines }}"
  vars:
    ports: "{{ [] if item is not match('^ *ports: ') else item | regex_replace('^ *ports: ','') | split(' ') }}"
  when: ports | length > 0

- block:

    - name: Start firewalld
      systemd:
        name: firewalld
        state: started
      changed_when: false

    - name: Set firewall rules
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: true
        state: enabled
      loop: "{{ firewall_ports }}"
  
    - name: Reload firewalld
      command: firewall-cmd --reload
      register: _result
      changed_when: _result is not defined

    - name: Stop and disable firewalld
      systemd:
        name: firewalld
        state: stopped
        enabled: false
      changed_when: false

  when: not firewall_configured

- name: Setup network bridging
  command: modprobe br_netfilter
  register: _result
  changed_when: _result is not defined

- name: Set bridge to use iptables
  shell: |
    echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables
  args:
    executable: /bin/bash
  register: _result
  changed_when: _result is not defined

- name: Disable swap partitions in /etc/fstab
  lineinfile:
    path: /etc/fstab
    line: '#\1'
    regexp: '^([^#].*swap.*)'
    backrefs: true
  register: _result

- name: Run swapoff -a
  command: swapoff -a
  register: _result
  changed_when: _result is not defined
