---

- name: Set fact for cluster ipxe folder
  set_fact:
    cluster_ipxe_folder: "{{ ipxe_folder }}/{{ cluster_name }}"

- name: Create ipxe folder for cluster
  file:
    path: "{{ cluster_ipxe_folder }}"
    state: directory
    mode: '0755'
  register: _result

- name: Collect ipxe macaddrs from all cluster hosts
  set_fact:
    cluster_ipxe_macaddrs: "{{ cluster_ipxe_macaddrs | default([]) | union(item) }}"
  loop: "{{ hostvars['cluster-facts']['cluster_host_names'] | map('extract', hostvars, 'inv_host_ipxe_macaddrs') }}"

- name: Create ipxe folders for cluster host mac addresses
  file:
    path: "{{ ipxe_folder }}/{{ item }}"
    state: directory
    mode: '0755'
  loop: "{{ cluster_ipxe_macaddrs }}"
  register: _result

- name: Create the boot.ipxe file
  copy:
    content: |
      #!ipxe
      set live_url {{ ipxe_url }}/{{ cluster_name }}
      initrd --name main ${live_url}/initrd.img
      kernel ${live_url}/vmlinuz initrd=main ignition.config.url=${live_url}/config.ign coreos.live.rootfs_url=${live_url}/rootfs.img {{ ignition_options }} {{ kernel_options }}
      boot
    dest: "{{ cluster_ipxe_folder }}/boot.ipxe"
    mode: '0644'
  vars:
    ignition_options: "ignition.firstboot ignition.platform.id=metal"

- name: Create hard link between the cluster_name/boot.ipxe and the cluster_host_macaddrs/boot.ipxe
  file:
    src: "{{ cluster_ipxe_folder }}/boot.ipxe"
    dest: "{{ ipxe_folder }}/{{ item }}/boot.ipxe"
    state: hard
  loop: "{{ cluster_ipxe_macaddrs }}"

- block:

    - name: Fetch download url
      uri:
        url: "{{ infra_env_url }}/downloads/image-url"
      register: _result
    
    - name: Download the image
      get_url:
        url: "{{ _result.json.url }}"
        dest: "{{ cluster_ipxe_folder }}/discovery.iso"
        mode: '0644'
      register: _result
      delay: 10
      retries: 30
      until: _result.status_code is defined and _result.status_code == 200
    
    - name: Copy files from discovery image for pxeboot
      shell:
        chdir: "{{ cluster_ipxe_folder }}"
        cmd: |
          isoinfo -i discovery.iso -x "/IMAGES/PXEBOOT/INITRD.IMG;1" > initrd.img
          isoinfo -i discovery.iso -x "/IMAGES/PXEBOOT/ROOTFS.IMG;1" > rootfs.img
          isoinfo -i discovery.iso -x "/IMAGES/PXEBOOT/VMLINUZ.;1" > vmlinuz
          isoinfo -i discovery.iso -x "/IMAGES/IGNITION.IMG;1" | gunzip | cpio -i --to-stdout > config.ign.json
      args:
        executable: /bin/bash
      changed_when: false

    - name: Load OCP ignition config into ansible
      set_fact:
        ignition_config: "{{ lookup('file', cluster_ipxe_folder + '/config.ign.json') }}"

    - name: Fix bad mode on /usr/local/bin/agent-fix-bz1964591 storage file
      set_fact:
        unwanted_storage_file_paths: "{{ (unwanted_storage_file_paths | default([])) + ['/usr/local/bin/agent-fix-bz1964591'] }}"
        added_storage_files: "{{ (added_storage_files | default([])) | union([item | combine({'mode': 493})]) }}"
      loop: "{{ ignition_config.storage.files }}"
      when: item.path == '/usr/local/bin/agent-fix-bz1964591'

    - name: Fix bad mode on /usr/local/bin/okd-binaries.sh storage file
      set_fact:
        unwanted_storage_file_paths: "{{ (unwanted_storage_file_paths | default([])) + ['/usr/local/bin/okd-binaries.sh'] }}"
        added_storage_files: "{{ (added_storage_files | default([])) | union([item | combine({'mode': 493})]) }}"
      loop: "{{ ignition_config.storage.files }}"
      when: item.path == '/usr/local/bin/okd-binaries.sh'

    - name: Load journal-upload ignition config into ansible
      set_fact:
        journal_upload_ignition_config: "{{ lookup('template', 'journal-upload-ignition-config.j2') }}"
      vars:
        journal_remote_fqdn: "{{ hostvars['localhost-facts'].ansible_fqdn }}"
      when: enable_journal_upload_service | default(false)

    - name: Set fact for journal upload ignition additions
      set_fact:
        added_storage_files: "{{ (added_storage_files | default([])) | union(journal_upload_ignition_config.storage.files) }}"
        added_systemd_units: "{{ (added_systemd_units | default([])) | union(journal_upload_ignition_config.systemd.units) }}"
      when: enable_journal_upload_service | default(false)

    - name: Copy service unit multipathd.service to multipathd.socket
      set_fact:
        added_systemd_units: "{{ (added_systemd_units | default([])) | union([item | combine({'name': 'multipathd.socket', 'enabled': (false if openshift_distro == 'okd' else true)})]) }}"
      loop: "{{ ignition_config.systemd.units }}"
      when: item.name == 'multipathd.service'

    - name: Disable assisted agent service when debugging
      set_fact:
        disabled_system_unit_names: "{{ (disabled_system_unit_names | default([])) + ['agent.service'] }}"
      when: disable_assisted_agent_service | default(false)

    - name: Fetch and disable service units we want to disable
      set_fact:
        disabled_systemd_units: "{{ (disabled_systemd_units | default([])) | union([item | combine({'enabled': false})]) }}"
      loop: "{{ ignition_config.systemd.units }}"
      when: item.name in disabled_system_unit_names | default([])

    - name: Add enabled service units to unwanted list and disabled units to additions
      set_fact:
        unwanted_systemd_unit_names: "{{ (unwanted_systemd_unit_names | default([])) | union(disabled_system_unit_names | default([])) }}"
        added_systemd_units: "{{ (added_systemd_units | default([])) | union(disabled_systemd_units | default([])) }}"

    - name: Set fact for unwanted storage files
      set_fact:
        unwanted_storage_files: "{{ unwanted_storage_files | default([]) | union([item]) }}"
      loop: "{{ ignition_config.storage.files }}"
      when: item.path in (unwanted_storage_file_paths | default([]))

    - name: Set fact for unwanted systemd units
      set_fact:
        unwanted_systemd_units: "{{ unwanted_systemd_units | default([]) | union([item]) }}"
      loop: "{{ ignition_config.systemd.units }}"
      when: item.name in (unwanted_systemd_unit_names | default([]))

    - name: Set fact for systemd units, removing unwanted units and adding units
      set_fact:
        new_storage_config:
          files: "{{ ignition_config.storage.files | difference(unwanted_storage_files | default([])) | union(added_storage_files | default([])) }}"
        new_systemd_config:
          units: "{{ ignition_config.systemd.units | difference(unwanted_systemd_units | default([])) | union(added_systemd_units | default([])) }}"

    - name: Combine the ignition configs
      set_fact:
        new_ignition_config:
          ignition: "{{ ignition_config.ignition }}"
          passwd: "{{ ignition_config.passwd }}"
          systemd: "{{ new_systemd_config }}"
          storage: "{{ new_storage_config }}"

    - name: Write out config.ign
      copy:
        content: "{{ new_ignition_config }}"
        dest: "{{ cluster_ipxe_folder }}/config.ign"

  when: cluster_state in ['insufficient', 'pending-for-input']

- name: Check that we can read the boot.ipxe file
  get_url:
    url: "{{ ipxe_url }}/{{ cluster_name }}/boot.ipxe"
    dest: "/tmp/boot.ipxe.tmp"
    mode: '0644'
  register: _result
  changed_when: false
  delay: 5
  retries: 10
  until: _result is defined and _result.status_code == 200
