---

- name: Print out the cluster configuration
  debug:
    msg:
    - "cluster_name: {{ hostvars['cluster-facts']['cluster_name'] }}"
    - "cluster_type: {{ cluster_type }}"
    - "cluster_size: {{ cluster_size }}"
    - "site: {{ fyre_site }}"
    - "os: {{ os }}"
    - "master_node_count: {{ master_node_count }}"
    - "worker_node_count: {{ worker_node_count }}"
    - "kubernetes_version: {{ kubernetes_version }}"
    - "local_storage_required: {{ local_storage_required }}"
    - "nfs_required: {{ nfs_required }}"
    - "nfs_storage_class_name: {{ nfs_storage_class_name }}"
    - "nfs_namespace: {{ nfs_namespace }}"
    - "nfs_master_local_storage: {{ nfs_master_local_storage }}"
    - "cephfs_required: {{ cephfs_required }}"
    - "cephfs_worker_local_storage: {{ cephfs_worker_local_storage }}"
    - "cephfs_namespace: {{ cephfs_namespace }}"

- name: Set facts used in this role
  set_fact:
    cluster_dir: "{{ hostvars['cluster-facts']['cluster_dir'] }}"
    cluster_domain: "{{ hostvars['cluster-facts']['cluster_domain'] }}"
    cluster_name: "{{ hostvars['cluster-facts']['cluster_name'] }}"
    docker_user: "{{ hostvars['playbook-secrets']['docker_io_user'] }}"
    docker_password: "{{ hostvars['playbook-secrets']['docker_io_password'] }}"
    fyre_user: "{{ hostvars['playbook-secrets']['fyre_user'] }}"
    fyre_apikey: "{{ hostvars['playbook-secrets']['fyre_apikey'] }}"
    fyre_user_email: "{{ hostvars['playbook-secrets']['na_artifactory']['user'] }}"
    ssh_public_key: "{{ hostvars['playbook-secrets']['ssh_public_key'] }}"

- name: Assert that we have required Fyre variables set
  assert:
    that:
    - lookup('env', 'FYRE_USER') | length > 0
    - lookup('env', 'FYRE_APIKEY') | length > 0
    msg: "ERROR: Please set Env Variables  FYRE_USER  FYRE_APIKEY"
  when: (fyre_user is not defined) or (fyre_apikey is not defined)

- name: Set facts for Fyre
  set_fact:
    fyre_user: "{{ lookup('env', 'FYRE_USER') }}"
    fyre_apikey: "{{ lookup('env', 'FYRE_APIKEY') }}"
  when: (fyre_user is not defined) or (fyre_apikey is not defined)

- name: Assert that we have required Docker variables set
  assert:
    that:
    - lookup('env', 'DOCKER_USER') | length > 0
    - lookup('env', 'DOCKER_PASSWORD') | length > 0
    msg: "ERROR: Please set Env Variables  DOCKER_USER  DOCKER_PASSWORD"
  when: (docker_user is not defined) or (docker_password is not defined)

- name: Assert that we have a cluster name
  assert:
    that: cluster_name | length > 0
    msg: "Please provide cluster name in config.yaml"

- name: Set facts for node cpu and memory size based on cluster size
  set_fact:
    cpu: "{{ tshirt_sizes[cluster_size]['cpu'] }}"
    memory: "{{ tshirt_sizes[cluster_size]['memory'] }}"

- name: Check to see if we already have a cluster with the name we want
  uri:
    url: "https://api.fyre.ibm.com/rest/v1/?operation=query&request=showclusters"
    method: GET
    user:  "{{ fyre_user }}"
    validate_certs: false
    password: "{{ fyre_apikey }}"
    force_basic_auth: true
    return_content: true
  changed_when: false
  register: cluster_status_response
  until: cluster_status_response.status != -1

- name: Set fact for check that cluster already exists
  set_fact:
    cluster_exists: "{{ cluster_name in (cluster_status_response.content | from_json)['clusters'] | map(attribute='name') }}"

- name: Set cluster_status_json fact
  set_fact:
    cluster_status_json: "{{ item }}"
  loop: "{{ (cluster_status_response.content | from_yaml)['clusters'] }}"
  when: item.name == cluster_name

- name: Print a message about the state of the cluster
  debug:
    msg: "{{ 'Cluster ' + cluster_name + (' exists.' if cluster_exists else ' does not exist.') }}" 

- when: not cluster_exists
  block:

    - name: Check to see if we have enough quota for the request
      uri:
        url: "https://api.fyre.ibm.com/rest/v1/?operation=getuserproductgroupquota&product_group_id={{ fyre_group_id }}&user_email={{ fyre_user_email }}"
        method: GET
        user:  "{{ fyre_user }}"
        validate_certs: false
        password: "{{ fyre_apikey }}"
        force_basic_auth: true
        return_content: true
      changed_when: false
      register: user_quota
      vars:
        fyre_group_id: '52'
      delay: 20
      retries: 30
      until: ((user_quota.content | from_json)['memory_quota_gb'] |int) - ((user_quota.content | from_json)['memory_allocated_gb'] | int) >= ((master_node_count|int) + (worker_node_count|int)) * (memory|int)

    - name: Ensure empty cluster dir
      file:
        path: "{{ cluster_dir }}"
        mode: '0755'
        state: "{{ item }}"
      loop:
      - absent
      - directory

    - name: Write cluster specific fyre request body
      copy:
        content: |
          fyre:
            creds:
              username: {{ fyre_user }}
              api_key: {{ fyre_apikey }}
              public_key: {{ ssh_public_key }}
          product_group_id: {{ fyre_group_id }}
          cluster_prefix: {{ cluster_name }}
          clusterconfig:
            instance_type: 'virtual_server'
            platform: {{ fyre_platform }}
          site: {{ fyre_site }}
          {{ cluster_name }}:
            - name: 'master'
              count: {{ master_node_count }}
              cpu: {{ cpu }}
              memory: {{ memory }}
              os: {{ os }}
              publicvlan: 'y'
              privatevlan: 'y'
          {% if (nfs_required | default(false) | bool) and (nfs_master_local_storage | default(0) | int > 0) %}
              additional_disks:
              - size: {{ nfs_master_local_storage }}
          {% endif %}
            - name: 'worker'
              count: {{ worker_node_count }}
              cpu: {{ cpu }}
              memory: {{ memory }}
              os: {{ os }}
              publicvlan: 'n'
              privatevlan: 'y'
          {% if (cephfs_required | default(false) | bool) and (cephfs_worker_local_storage | default(0) | int > 0) %}
              additional_disks:
              - size: {{ cephfs_worker_local_storage }}
          {% endif %}
        dest: "{{ cluster_dir + '/fyre_cluster_req.yml' }}"
        mode: '0600'

    - name: Build Fyre stack
      uri:
        url: 'https://api.fyre.ibm.com/rest/v1/?operation=build'
        method: "POST"
        user: "{{ fyre_user }}"
        password: "{{ fyre_apikey }}"
        validate_certs: false
        body_format: "json"
        force_basic_auth: true
        return_content: true
        body: "{{ lookup('file', cluster_dir + '/fyre_cluster_req.yml') | from_yaml }}"
      register: fyre_status

    - name: Set fact for response
      set_fact:
        response_json: "{{ fyre_status.content | from_json }}"

    - name: Set fact for request_id
      set_fact:
        request_id: "{{ response_json['request_id'] }}"

    - name: Check for errors
      fail: msg="cluster build request failed"
      when: response_json['status'] not in ['submitted', 'success']

- when: cluster_exists
  block:

    - name: Look up our request id
      uri:
        url: "https://api.fyre.ibm.com/rest/v1/?operation=query&request=showrequests"
        method: GET
        user:  "{{ fyre_user }}"
        validate_certs: false
        password: "{{ fyre_apikey }}"
        force_basic_auth: true
        return_content: true
      changed_when: false
      register: request_status_response

    - name: Set request_id fact
      set_fact:
        request_id: "{{ item.id }}"
      loop: "{{ (request_status_response.content | from_json)['request'] }}"
      when: item.cluster_name == cluster_name

- block:

    - name: Wait until cluster is finished building
      uri:
        url: "https://api.fyre.ibm.com/rest/v1/?operation=query&request=showrequests&request_id={{ request_id }}"
        method: GET
        user:  "{{ fyre_user }}"
        validate_certs: false
        password: "{{ fyre_apikey }}"
        force_basic_auth: true
        return_content: true
      changed_when: false
      register: request_status_response
      delay: 20
      retries: 600
      until: (request_status_response.status == 200) and request_status_response.content is defined and not (request_status_response.content | from_json)['request'][0].status is match('.*building.*')

    - name: Check to see if we already have a cluster with the name we want
      uri:
        url: "https://api.fyre.ibm.com/rest/v1/?operation=query&request=showclusters"
        method: GET
        user:  "{{ fyre_user }}"
        validate_certs: false
        password: "{{ fyre_apikey }}"
        force_basic_auth: true
        return_content: true
      changed_when: false
      register: cluster_status_response

    - name: Set cluster_status_json fact
      set_fact:
        cluster_status_json: "{{ item }}"
      loop: "{{ (cluster_status_response.content | from_json)['clusters'] }}"
      when: item.name == cluster_name

- name: Assert that we got a cluster with the name we requested
  assert:
    that: cluster_name == cluster_status_json.name

- name: Fetch the cluster details
  uri:
    url: "https://api.fyre.ibm.com/rest/v1/?operation=query&request=showclusterdetails&cluster_name={{ cluster_name }}"
    method: GET
    user:  "{{ fyre_user }}"
    validate_certs: false
    password: "{{ fyre_apikey }}"
    force_basic_auth: true
    return_content: true
  changed_when: false
  register: cluster_details_response

- name: Set fact for cluster_details_json
  set_fact:
    cluster_details_json: "{{ (cluster_details_response.content | from_json)[cluster_name] }}"

- name: Create groups containing all cluster, master, and worker nodes
  add_host:
    name: "{{ item.node }}"
    groups:
    - all_nodes
    - cluster_nodes
    - "{{ 'master_nodes' if item.node is match(cluster_name + '-master') else 'worker_nodes' }}"
    node_provisioning_role: 'node_provision_cncf'
    ansible_connection: ssh
    ansible_ssh_user: root
    fqdn: "{{ item.node + '.fyre.ibm.com' }}"
    short_hostname: "{{ item.node }}"
    privateip: "{{ item.privateip }}"
    publicip: "{{ item.publicip }}"
  loop: "{{ cluster_details_json }}"
  changed_when: false

- name: Set the ansible_host for all master nodes
  set_fact:
    ansible_host: "{{ hostvars[item].publicip }}"
  loop: "{{ groups['master_nodes'] }}"
  delegate_to: "{{ item }}"
  delegate_facts: true

- name: Set fact with unmodified value of ansible_ssh_common_args
  set_fact:
    ssh_common_args: "{{ ansible_ssh_common_args }}"
    first_master_node_host: "{{ hostvars[groups['master_nodes'][0]].ansible_host }}"

- name: Set ssh proxy command for all worker nodes
  set_fact:
    ansible_host: "{{ hostvars[item].privateip }}"
    ansible_ssh_common_args:
      "{{ ssh_common_args }} -o ProxyCommand='ssh {{ ssh_common_args }} -W %h:%p -q root@{{ first_master_node_host }}'"
  loop: "{{ groups['worker_nodes'] }}"
  delegate_to: "{{ item }}"
  delegate_facts: true

- name: Clear register results
  set_fact:
    cluster_status_response: {}
    user_quota: {}
    fyre_status: {}
    response_json: {}
    request_status_response: {}
    cluster_details_response: {}
