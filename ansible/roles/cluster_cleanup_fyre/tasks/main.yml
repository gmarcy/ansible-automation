---

- name: Set facts used in this role
  set_fact:
    cluster_dir: "{{ hostvars['cluster-facts']['cluster_dir'] }}"
    cluster_name: "{{ hostvars['cluster-facts']['cluster_name'] }}"
    fyre_user: "{{ hostvars['playbook-secrets']['fyre_user'] }}"
    fyre_apikey: "{{ hostvars['playbook-secrets']['fyre_apikey'] }}"

- name: Set a default for when there is no cluster
  set_fact:
    no_cluster:
      name: "{{ cluster_name }}"
      status: 'absent'

- name: Delete Fyre stack
  uri:
    url: "{{ fyreocpplus_clusterstatusurl }}"
    method: "DELETE"
    user: "{{ lookup('unvault', fyre_user) | trim }}"
    password: "{{ lookup('unvault', fyre_apikey) | trim }}"
    validate_certs: false
    force_basic_auth: true
    return_content: true
  register: fyre_status
  delay: 15
  retries: 20
  until: >
    (fyre_status.status != -1) and
    ((fyre_status.content | from_json)['clusters'] | default([no_cluster]) | selectattr('name','==',cluster_name) | map(attribute='status') | first) not in ['pending delete', 'deleting']

- name: Set fyre_status_json fact
  set_fact:
    fyre_status_json: "{{ fyre_status.content | from_json }}"

- when: fyre_status_json['status'] != 'error' and wait_for_completion | default(true) | bool
  name: Wait for completion if there wasn't an error
  block:

    - name: Set fact for request_id
      set_fact:
        request_id: "{{ fyre_status_json['request_id'] }}"

    - name: Remove previous cluster dir
      file:
        path: "{{ cluster_dir }}"
        state: absent

    - name: Wait until cluster is finished building
      uri:
        url: "https://api.fyre.ibm.com/rest/v1/?operation=query&request=showrequests&request_id={{ request_id }}"
        method: GET
        user:  "{{ lookup('unvault', fyre_user) | trim }}"
        password: "{{ lookup('unvault', fyre_apikey) | trim }}"
        validate_certs: false
        force_basic_auth: true
        return_content: true
      changed_when: false
      register: request_status_response
      delay: 20
      retries: 600
      until: (request_status_response.status == 200) and request_status_response.content is defined and (request_status_response.content | from_json)['request'] | length > 0) and not (request_status_response.content | from_json)['request'][0].status in ['pending delete', 'deleting']

