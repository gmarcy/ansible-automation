---

- name: Set facts used in this role
  set_fact:
    cephfs_setup_dir: "{{ hostvars['cluster-facts']['cluster_dir'] + '/cephfs' }}"
    device_filter: "{{ cephfs_device_filter }}"
    kubernetes_distro: "{{ hostvars['cluster-facts']['kubernetes_distro'] }}"

- name: Check if the new storage class exists
  kubernetes.core.k8s_info:
    api_key: "{{ api_key | default(omit) }}"
    api_version: storage.k8s.io/v1
    kind: StorageClass
    kubeconfig: "{{ kubeconfig_path }}"
    name: "{{ default_storage_class }}"
  register: _result_sc

- name: Set fact if storage class is present
  set_fact:
    cephfs_storage_ready: true
  loop: "{{ _result_sc.resources | map(attribute='provisioner') }}"
  when: item == 'rook-ceph.cephfs.csi.ceph.com'

- name: Check if CephCluster exists
  kubernetes.core.k8s_info:
    api_key: "{{ api_key | default(omit) }}"
    api_version: ceph.rook.io/v1
    kind: CephCluster
    kubeconfig: "{{ kubeconfig_path }}"
    name: rook-ceph
    namespace: rook-ceph
  register: _result_cephcluster
  when: cephfs_storage_ready | default(false)

- name: Set fact if CephFS is Ready
  set_fact:
    cephfs_is_ready: "{{ (_result_cephcluster.resources | length > 0) and (_result_cephcluster.resources | map(attribute='status.phase') | difference(['Ready']) | length == 0) }}"
  when: cephfs_storage_ready | default(false)

- when: not ((cephfs_storage_ready | default(false)) and (cephfs_is_ready | default(false)))
  name: Install CephFS
  block:
    # BLOCK_START

    - name: Create cephfs_setup_dir directory
      file:
        path: "{{ cephfs_setup_dir }}"
        state: directory
        mode: '0755'

    - name: Set rook_setup_dir fact
      set_fact:
        rook_setup_dir: "{{ cephfs_setup_dir }}/rook"

    - name: Create rook_setup_dir directory
      file:
        path: "{{ rook_setup_dir }}"
        state: directory
      register: _result

    - name: Clone the rook master or release-major.minor branch
      git:
        repo: http://github.com/rook/rook.git
        dest: "{{ rook_setup_dir }}"
        version: "{{ 'master' if rook_ceph_release == 'master' else 'release-' + (rook_ceph_release | regex_replace('v([0-9]+\\.[0-9]+)\\..*', '\\1')) }}"
        clone: "{{ _result.changed }}"
        force: "{{ not _result.changed }}"

    - name: Clone the rook HEAD or rook_ceph_release tag
      git:
        repo: http://github.com/rook/rook.git
        dest: "{{ rook_setup_dir }}"
        version: "{{ 'HEAD' if rook_ceph_release == 'master' else rook_ceph_release }}"
        clone: "{{ _result.changed }}"
        force: "{{ not _result.changed }}"

    - name: Set majorRelease fact
      set_fact:
        majorRelease: "{{ rook_ceph_release | regex_replace('(v[0-9]+\\.[0-9]+)\\..*', '\\1') }}"

    - name: Set path for examples within rook repo
      set_fact:
        rook_examples_dir: "{{ rook_setup_dir + ('/cluster/examples/kubernetes/ceph' if (majorRelease | regex_replace('v[0-9]+\\.([0-9]+)\\..*', '\\1') | int >= 8) else '/deploy/examples') }}"

    - name: Ensure namespace exists
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kind: Namespace
        kubeconfig: "{{ kubeconfig_path }}"
        name: rook-ceph
        state: present
      register: _result

    - name: Disable bluefs_buffered_io
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        definition:
          data:
            config: |
              [global]
              bluefs_buffered_io = false
        kind: ConfigMap
        kubeconfig: "{{ kubeconfig_path }}"
        name: rook-config-override
        namespace: rook-ceph
      register: _result

    - name: Apply crds.yaml to the cluster
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        src: "{{ rook_examples_dir + '/crds.yaml' }}"
      register: _result
      when: majorRelease != 'v1.4'

    - name: Apply common.yaml to the cluster
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        src: "{{ rook_examples_dir + '/common.yaml' }}"
      register: _result

    - name: Apply operator-openshift.yaml to the cluster
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        src: "{{ rook_examples_dir + '/operator-openshift.yaml' }}"
      register: _result
      when: kubernetes_distro == 'openshift'

    - name: Apply operator.yaml to the cluster
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        src: "{{ rook_examples_dir + '/operator.yaml' }}"
      register: _result
      when: kubernetes_distro != 'openshift'

    - name: Wait for ceph operator to be Running
      kubernetes.core.k8s_info:
        api_key: "{{ api_key | default(omit) }}"
        kind: Pod
        kubeconfig: "{{ kubeconfig_path }}"
        label_selectors:
        - app=rook-ceph-operator
        namespace: rook-ceph
        wait: true
        wait_condition:
          type: Ready
      register: _result

    - name: Set useAllDevices to false
      blockinfile:
        path: "{{ rook_examples_dir + '/cluster.yaml' }}"
        marker: '    # {mark} PATCH'
        block: |
          # disable useAllDevices, add deviceFilter
              useAllDevices: false
              deviceFilter: "{{ device_filter }}"
        insertafter: '^    useAllDevices: true$'

    - name: Remove the original useAllDevices true
      lineinfile:
        path: "{{ rook_examples_dir + '/cluster.yaml' }}"
        regexp: '^    useAllDevices: true$'
        state: absent

    - name: Apply cluster.yaml to the cluster
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        src: "{{ rook_examples_dir + '/cluster.yaml' }}"
      register: _result

    - name: Read rook-ceph-mon-endpoints ConfigMap
      kubernetes.core.k8s_info:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: ConfigMap
        name: rook-ceph-mon-endpoints
        namespace: rook-ceph
        wait: true
      register: _result
      delay: 30
      retries: 60
      until: (_result.resources | length > 0) and (_result.resources[0].data.maxMonId | int) >= 0

    - name: Set fact from data.mapping
      set_fact:
        data_node_count: "{{ (_result.resources[0]['data']['mapping'] | from_json)['node'].keys() | length }}"

    - name: Read rook-ceph-mon-endpoints ConfigMap
      kubernetes.core.k8s_info:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: ConfigMap
        name: rook-ceph-mon-endpoints
        namespace: rook-ceph
        wait: true
      register: _result
      delay: 30
      retries: 60
      until: (_result.resources[0]['data']['csi-cluster-config-json'] | from_json)[0]['monitors'] | length == data_node_count

    - name: Wait for all rook-ceph-osd pods to be Running
      kubernetes.core.k8s_info:
        api_key: "{{ api_key | default(omit) }}"
        kind: Pod
        kubeconfig: "{{ kubeconfig_path }}"
        label_selectors:
        - app=rook-ceph-osd
        namespace: rook-ceph
      register: _result
      delay: 20
      retries: 30
      until: (_result.resources | length >= 3) and (_result.resources | map(attribute='status.phase') | unique | difference(['Running']) | length == 0)

    - name: Apply filesystem-test.yaml to the cluster
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        src: "{{ rook_examples_dir + '/filesystem-test.yaml' }}"
      register: _result

    - name: Apply csi/cephfs/storageclass.yaml to the cluster
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        src: "{{ rook_examples_dir + '/csi/cephfs/storageclass.yaml' }}"
      register: _result

    - name: Apply csi/rbd/storageclass-test.yaml to the cluster
      kubernetes.core.k8s:
        api_key: "{{ api_key | default(omit) }}"
        kubeconfig: "{{ kubeconfig_path }}"
        src: "{{ rook_examples_dir + '/csi/rbd/storageclass-test.yaml' }}"
      register: _result

    - name: Wait for all rook-ceph-mds pods to be Running
      kubernetes.core.k8s_info:
        api_key: "{{ api_key | default(omit) }}"
        kind: Pod
        kubeconfig: "{{ kubeconfig_path }}"
        label_selectors:
        - app=rook-ceph-mds
        namespace: rook-ceph
      register: _result
      delay: 20
      retries: 30
      until: (_result.resources | length > 0) and (_result.resources | map(attribute='status.phase') | unique | difference(['Running']) | length == 0)

    - name: Wait until CephCluster is Ready
      kubernetes.core.k8s_info:
        api_key: "{{ api_key | default(omit) }}"
        api_version: ceph.rook.io/v1
        kind: CephCluster
        kubeconfig: "{{ kubeconfig_path }}"
        name: rook-ceph
        namespace: rook-ceph
      register: _result
      delay: 20
      retries: 30
      until: (_result.resources | length > 0) and (_result.resources | map(attribute='status.phase') | unique | difference(['Ready']) | length == 0)

  # BLOCK_END
