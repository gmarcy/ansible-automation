---

- name: Set facts for these tasks
  set_fact:
    target_namespace: "{{ nfs_storage_namespace }}"

- name: Create ServiceAccount
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: v1
    kind: ServiceAccount
    name: local-static-provisioner
    namespace: "{{ target_namespace }}"
    definition:
      metadata:
        labels:
          helm.sh/chart: provisioner-2.6.0-alpha.1
          app.kubernetes.io/name: provisioner
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/instance: local-static-provisioner
  register: _result

- name: Create ConfigMap
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: v1
    kind: ConfigMap
    name: local-static-provisioner-config
    namespace: "{{ target_namespace }}"
    definition:
      metadata:
        labels:
          helm.sh/chart: provisioner-2.6.0-alpha.1
          app.kubernetes.io/name: provisioner
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/instance: local-static-provisioner
      data:
        storageClassMap: |
          "{{ local_storage_class }}":
            hostDir: /mnt/disks
            mountDir: /mnt/disks
            blockCleanerCommand:
            - "/scripts/shred.sh"
            - "2"
            volumeMode: Filesystem
            fsType: ext4
            namePattern: "*"
  register: _result

- name: Create StorageClass
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: storage.k8s.io/v1
    kind: StorageClass
    name: "{{ local_storage_class }}"
    definition:
      metadata:
        labels:
          helm.sh/chart: provisioner-2.6.0-alpha.1
          app.kubernetes.io/name: provisioner
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/instance: local-static-provisioner
      provisioner: kubernetes.io/no-provisioner
      volumeBindingMode: WaitForFirstConsumer
      reclaimPolicy: Delete
  register: _result

- name: Create ClusterRole
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: local-static-provisioner-node-clusterrole
    definition:
      metadata:
        labels:
          helm.sh/chart: provisioner-2.6.0-alpha.1
          app.kubernetes.io/name: provisioner
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/instance: local-static-provisioner
      rules:
      - apiGroups: [""]
        resources: ["persistentvolumes"]
        verbs: ["get", "list", "watch", "create", "delete"]
      - apiGroups: ["storage.k8s.io"]
        resources: ["storageclasses"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["watch"]
      - apiGroups: ["", "events.k8s.io"]
        resources: ["events"]
        verbs: ["create", "update", "patch"]
      - apiGroups: [""]
        resources: ["nodes"]
        verbs: ["get"]
  register: _result

- name: Create ClusterRoleBinding
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    name: local-static-provisioner-node-binding
    definition:
      metadata:
        labels:
          helm.sh/chart: provisioner-2.6.0-alpha.1
          app.kubernetes.io/name: provisioner
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/instance: local-static-provisioner
      subjects:
      - kind: ServiceAccount
        name: local-static-provisioner
        namespace: "{{ target_namespace }}"
      roleRef:
        kind: ClusterRole
        name: local-static-provisioner-node-clusterrole
        apiGroup: rbac.authorization.k8s.io
  register: _result

- name: Create DaemonSet
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: apps/v1
    kind: DaemonSet
    name: local-static-provisioner
    namespace: "{{ target_namespace }}"
    definition:
      metadata:
        labels:
          helm.sh/chart: provisioner-2.6.0-alpha.1
          app.kubernetes.io/name: provisioner
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/instance: local-static-provisioner
      spec:
        selector:
          matchLabels:
            app.kubernetes.io/name: provisioner
            app.kubernetes.io/instance: local-static-provisioner
        template:
          metadata:
            labels:
              app.kubernetes.io/name: provisioner
              app.kubernetes.io/instance: local-static-provisioner
            annotations:
              checksum/config: 49fd0db6c0e3bc6c0607d6f94132b4bd3a4b7445efd977e564038e93320045cf
          spec:
            serviceAccountName: local-static-provisioner
            nodeSelector:
              kubernetes.io/hostname: "{{ target_hostname }}"
            tolerations:
              - operator: "Exists"
            containers:
              - name: provisioner
                image: k8s.gcr.io/sig-storage/local-volume-provisioner:v2.4.0
                securityContext:
                  privileged: true
                env:
                - name: MY_NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                - name: MY_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: JOB_CONTAINER_IMAGE
                  value: k8s.gcr.io/sig-storage/local-volume-provisioner:v2.4.0
                ports:
                - name: metrics
                  containerPort: 8080
                volumeMounts:
                  - name: provisioner-config
                    mountPath: /etc/provisioner/config
                    readOnly: true
                  - name: provisioner-dev
                    mountPath: /dev
                  - name: "{{ local_storage_class }}"
                    mountPath: /mnt/disks
                    mountPropagation: HostToContainer
            volumes:
              - name: provisioner-config
                configMap:
                  name: local-static-provisioner-config
              - name: provisioner-dev
                hostPath:
                  path: /dev
              - name: "{{ local_storage_class }}"
                hostPath:
                  path: /mnt/disks
  register: _result
