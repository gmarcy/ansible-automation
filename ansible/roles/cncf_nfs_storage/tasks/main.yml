---

# #Install and Configure NFS
# platform=$(awk -F= '/^NAME/{print $2}' /etc/os-release)   #getting the OS platform
# if [[ $platform == *"Red Hat Enterprise Linux"* ]]
# then
#     sudo dnf install nfs-utils -y
#     sudo systemctl start nfs-server.service
#     sudo systemctl enable nfs-server.service
#     sudo systemctl status nfs-server.service -q
#     rpcinfo -p | grep nfs
# else
#     sudo apt update -y
#     sudo apt install nfs-kernel-server -y
# fi
# # Creating and exporting NFS share
# sudo mkdir -p /mnt/nfs_shares/docs
# sudo chown -R nobody: /mnt/nfs_shares/docs
# sudo chmod -R 777 /mnt/nfs_shares/docs
# sudo systemctl restart nfs-utils.service
# set +x
# info=$(curl -X GET -s -k -u ${FYRE_USER}:${FYRE_APIKEY} "https://api.fyre.ibm.com/rest/v1/?operation=query&request=showclusterdetails&cluster_name=${CLUSTER_NAME}")
# set -x
# i=0
# until [ $i -ge $count1 ]
# do
#     set +x
#     IPADDRESS=$(echo $info | jq -r --arg k $CLUSTER_NAME '.[$k]['"$i"'].privateip')
#     set -x
#     echo "/mnt/nfs_shares/docs $IPADDRESS(rw,sync,no_all_squash,root_squash)" >> '/etc/exports'
#     ((i=i+1))
# done
# 
# sudo exportfs -arv
# sudo exportfs -s
# # Configuring the firewall rules for NFS Server
# systemctl start firewalld
# sudo firewall-cmd --permanent --add-service=nfs
# sudo firewall-cmd --permanent --add-service=rpc-bind
# sudo firewall-cmd --permanent --add-service=mountd
# sudo firewall-cmd --reload
# systemctl stop firewalld
# systemctl disable firewalld
# 
# 
# on workers
# 
#     platform=$(awk -F= '/^NAME/{print $2}' /etc/os-release)   #getting the OS platform
#     if [[ $platform == *"Red Hat Enterprise Linux"* ]]
#     then
#         sudo dnf install nfs-utils nfs4-acl-tools -y
#         showmount -e $Server_IP
#         sudo mkdir -p /mnt/client_share
#         sudo mount -t nfs $Server_IP:/mnt/nfs_shares/docs /mnt/client_share
#         sudo mount | grep -i nfs
#         echo "$Server_IP:/mnt/nfs_shares/docs  /mnt/client_share  nfs  defaults  0  0" >> '/etc/fstab'
#     else
#         sudo apt update -y
#         sudo apt install nfs-common -y
#         sudo mkdir -p /mnt/nfs_clientshare
#         ifconfig
#         sudo mount $Server_IP:/mnt/nfs_shares/docs  /mnt/nfs_clientshare
#     fi
# 
# platform=$(awk -F= '/^NAME/{print $2}' /etc/os-release)
# if [[ $platform == *"Red Hat Enterprise Linux"* ]]
# then
#     yum install jq -y
# else
#     apt-get install jq -y
# fi
# set +x
# info=$(curl -X GET -s -k -u ${FYRE_USER}:${FYRE_APIKEY} "https://api.fyre.ibm.com/rest/v1/?operation=query&request=showclusterdetails&cluster_name=${CLUSTER_NAME}")
# export Server_IP=$(echo $info | jq -r --arg k $CLUSTER_NAME '.[$k][0].privateip')
# set -x
# 
# kubectl create namespace $NAMESPACE
# cat <<EOF | kubectl apply -f -
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: nfs-client-provisioner
#   # replace with namespace where provisioner is deployed
#   namespace: $NAMESPACE
# ---
# kind: ClusterRole
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: nfs-client-provisioner-runner
# rules:
#   - apiGroups: [""]
#     resources: ["nodes"]
#     verbs: ["get", "list", "watch"]
#   - apiGroups: [""]
#     resources: ["persistentvolumes"]
#     verbs: ["get", "list", "watch", "create", "delete"]
#   - apiGroups: [""]
#     resources: ["persistentvolumeclaims"]
#     verbs: ["get", "list", "watch", "update"]
#   - apiGroups: ["storage.k8s.io"]
#     resources: ["storageclasses"]
#     verbs: ["get", "list", "watch"]
#   - apiGroups: [""]
#     resources: ["events"]
#     verbs: ["create", "update", "patch"]
# ---
# kind: ClusterRoleBinding
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: run-nfs-client-provisioner
# subjects:
#   - kind: ServiceAccount
#     name: nfs-client-provisioner
#     # replace with namespace where provisioner is deployed
#     namespace: $NAMESPACE
# roleRef:
#   kind: ClusterRole
#   name: nfs-client-provisioner-runner
#   apiGroup: rbac.authorization.k8s.io
# ---
# kind: Role
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: leader-locking-nfs-client-provisioner
#   # replace with namespace where provisioner is deployed
#   namespace: $NAMESPACE
# rules:
#   - apiGroups: [""]
#     resources: ["endpoints"]
#     verbs: ["get", "list", "watch", "create", "update", "patch"]
# ---
# kind: RoleBinding
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: leader-locking-nfs-client-provisioner
#   # replace with namespace where provisioner is deployed
#   namespace: $NAMESPACE
# subjects:
#   - kind: ServiceAccount
#     name: nfs-client-provisioner
#     # replace with namespace where provisioner is deployed
#     namespace: $NAMESPACE
# roleRef:
#   kind: Role
#   name: leader-locking-nfs-client-provisioner
#   apiGroup: rbac.authorization.k8s.io
# ---
# apiVersion: storage.k8s.io/v1
# kind: StorageClass
# metadata:
#   name: $STORAGE_NAME
# provisioner: k8s-sigs.io/nfs-subdir-external-provisioner # or choose another name, must match deployment's env PROVISIONER_NAME'
# parameters:
#   archiveOnDelete: "false"
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: nfs-client-provisioner
#   labels:
#     app: nfs-client-provisioner
#   # replace with namespace where provisioner is deployed
#   namespace: $NAMESPACE
# spec:
#   replicas: 1
#   strategy:
#     type: Recreate
#   selector:
#     matchLabels:
#       app: nfs-client-provisioner
#   template:
#     metadata:
#       labels:
#         app: nfs-client-provisioner
#     spec:
#       serviceAccountName: nfs-client-provisioner
#       containers:
#         - name: nfs-client-provisioner
#           image: k8s.gcr.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2
#           volumeMounts:
#             - name: nfs-client-root
#               mountPath: /persistentvolumes
#           env:
#             - name: PROVISIONER_NAME
#               value: k8s-sigs.io/nfs-subdir-external-provisioner
#             - name: NFS_SERVER
#               value: $Server_IP
#             - name: NFS_PATH
#               value: /mnt/nfs_shares/docs
#       volumes:
#         - name: nfs-client-root
#           nfs:
#             server: $Server_IP
#             path: /mnt/nfs_shares/docs
# ---
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: test-claim
# spec:
#   storageClassName: $STORAGE_NAME
#   accessModes:
#     - ReadWriteMany
#   resources:
#     requests:
#       storage: 1Mi
# EOF
