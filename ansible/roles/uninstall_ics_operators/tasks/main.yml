---

- name: Set facts for these tasks
  set_fact:
    install_common_services_operator: "{{ deploy_common_services_operator | default(true) }}"

- when: install_common_services_operator
  name: Install Common Services using the IBM Common Services Operator
  block:

    - name: Create Subscription for IBM Common Service Operator
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        kubeconfig: "{{ kubeconfig_path }}"
        name: "{{ ics_operator_name }}-v3.21-{{ ics_operator_catalog_source }}-{{ ics_operator_catalog_source_namespace }}"
        namespace: "{{ ics_operator_namespace }}"
        definition:
          metadata:
            labels:
              operators.coreos.com/ibm-common-service-operator.openshift-operators: ""
          spec:
            channel: v3.21
            installPlanApproval: Automatic
            name: "{{ ics_operator_name }}"
            source: "{{ ics_operator_catalog_source }}"
            sourceNamespace: "{{ ics_operator_catalog_source_namespace }}"
            startingCSV: ibm-common-service-operator.v3.21.0
      register: _result

    - name: Wait for ibm-common-service-operator
      kubernetes.core.k8s_info:
        api_key: "{{ api_key }}"
        kind: Deployment
        kubeconfig: "{{ kubeconfig_path }}"
        name: "{{ ics_operator_name }}"
        namespace: "{{ ics_operator_namespace }}"
        wait: true
        wait_condition:
          type: Available
        wait_sleep: 20
        wait_timeout: 300
      register: _result

    - name: Create CommonService instance
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v3
        kind: CommonService
        kubeconfig: "{{ kubeconfig_path }}"
        name: common-service
        namespace: "{{ ics_namespace }}"
        definition:
          spec:
            size: starterset
      register: _result

    - name: Get CommonService status
      kubernetes.core.k8s_info:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v3
        kind: CommonService
        kubeconfig: "{{ kubeconfig_path }}"
        name: common-service
        namespace: "{{ ics_namespace }}"
      register: _result
      delay: 30
      retries: 120
      until: _result.resources | length > 0

    - name: Wait for CommonService to reach Succeeded phase
      kubernetes.core.k8s_info:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v3
        kind: CommonService
        kubeconfig: "{{ kubeconfig_path }}"
        name: common-service
        namespace: "{{ ics_namespace }}"
      register: _result
      delay: 30
      retries: 120
      until: >
        (_result.resources | length > 0) and (_result.resources | map(attribute='status.phase') | unique | difference(['Updating', 'Succeeded']) | length == 0)

    - name: Wait for CommonService to reach Succeeded phase
      kubernetes.core.k8s_info:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v3
        kind: CommonService
        kubeconfig: "{{ kubeconfig_path }}"
        name: common-service
        namespace: "{{ ics_namespace }}"
      register: _result
      delay: 30
      retries: 120
      until: >
        (_result.resources | length > 0) and
        (_result.resources | map(attribute='status.phase') | unique | difference(['Updating', 'Succeeded']) | length == 0) and
        (_result.resources | map(attribute='status.overallStatus', default='MISSING') | unique == ['Succeeded'])

- when: not install_common_services_operator
  name: Install Common Services the hard way one step at a time
  block:

    - name: Ensure target_namespace exists
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        kind: Namespace
        kubeconfig: "{{ kubeconfig_path }}"
        name: "{{ target_namespace }}"
        state: present
      register: _result

    - name: Create OperatorGroup for ibm-common-services
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operators.coreos.com/v1
        kind: OperatorGroup
        kubeconfig: "{{ kubeconfig_path }}"
        name: ibm-common-services-operators
        namespace: "{{ target_namespace }}"
        definition:
          spec:
            targetNamespaces:
            - "{{ target_namespace }}"
      register: _result

    - name: Create Subscription for IBM Namespace Scope Operator
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        kubeconfig: "{{ kubeconfig_path }}"
        name: ibm-namespace-scope-operator
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels: "{{ labels }}"
          spec:
            channel: v3.21
            installPlanApproval: Automatic
            name: ibm-namespace-scope-operator
            source: "{{ operator_catalog_source }}"
            sourceNamespace: "{{ ics_operator_catalog_source_namespace }}"
        wait: true
        wait_condition:
          type: CatalogSourcesUnhealthy
          status: false
      vars:
        key: "{{ 'operators.coreos.com/ibm-namespace-scope-operator.' + target_namespace }}"
        labels: "{{ [{'key': key, 'value': '' }] | items2dict }}"
      register: _result

    - name: Wait for ibm-namespace-scope-operator
      kubernetes.core.k8s_info:
        api_key: "{{ api_key }}"
        kind: Deployment
        kubeconfig: "{{ kubeconfig_path }}"
        name: ibm-namespace-scope-operator
        namespace: "{{ target_namespace }}"
        wait: true
        wait_condition:
          type: Available
        wait_sleep: 20
        wait_timeout: 300
      register: _result

    - name: Create NamespaceScope operands
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v1
        kind: NamespaceScope
        kubeconfig: "{{ kubeconfig_path }}"
        name: common-service
        namespace: "{{ target_namespace }}"
        definition:
          spec:
            csvInjector:
              enable: true
            namespaceMembers:
            - "{{ ics_namespace }}"
            - openshift-redhat-marketplace
      register: _result

    - name: Create NamespaceScope operands
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v1
        kind: NamespaceScope
        kubeconfig: "{{ kubeconfig_path }}"
        name: nss-managedby-odlm
        namespace: "{{ target_namespace }}"
        definition:
          spec:
            csvInjector:
              enable: true
            namespaceMembers:
            - "{{ ics_operator_namespace }}"
            - "{{ ics_namespace }}"
      register: _result

    - name: Create NamespaceScope operands
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v1
        kind: NamespaceScope
        kubeconfig: "{{ kubeconfig_path }}"
        name: nss-odlm-scope
        namespace: "{{ target_namespace }}"
        definition:
          spec:
            configmapName: odlm-scope
            csvInjector:
              enable: false
            namespaceMembers:
            - openshift-redhat-marketplace
            - "{{ ics_namespace }}"
            restartLabels:
              intent: projected-odlm
      register: _result

    - name: Create NamespaceScope operands
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v1
        kind: NamespaceScope
        kubeconfig: "{{ kubeconfig_path }}"
        name: odlm-scope-managedby-odlm
        namespace: "{{ target_namespace }}"
        definition:
          spec:
            configmapName: odlm-scope
            csvInjector:
              enable: false
            namespaceMembers:
            - "{{ ics_namespace }}"
            - "{{ ics_operator_namespace }}"
            restartLabels:
              intent: projected-odlm
      register: _result

    - name: Create Subscription for IBM ODLM
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        kubeconfig: "{{ kubeconfig_path }}"
        name: operand-deployment-lifecycle-manager-app
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels: "{{ labels }}"
          spec:
            channel: v3.21
            installPlanApproval: Automatic
            name: ibm-odlm
            source: "{{ operator_catalog_source }}"
            sourceNamespace: "{{ ics_operator_catalog_source_namespace }}"
        wait: true
        wait_condition:
          type: CatalogSourcesUnhealthy
          status: false
      vars:
        key: "{{ 'operators.coreos.com/ibm-odlm.' + target_namespace }}"
        labels: "{{ [{'key': key, 'value': '' }] | items2dict }}"
      register: _result

    - name: Wait for operand-deployment-lifecycle-manager
      kubernetes.core.k8s_info:
        api_key: "{{ api_key }}"
        kind: Deployment
        kubeconfig: "{{ kubeconfig_path }}"
        name: operand-deployment-lifecycle-manager
        namespace: "{{ target_namespace }}"
        wait: true
        wait_condition:
          type: Available
        wait_sleep: 20
        wait_timeout: 300
      register: _result

    - name: Create the OperandRegistry
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v1alpha1
        kind: OperandRegistry
        kubeconfig: "{{ kubeconfig_path }}"
        name: "{{ ics_operand_registry_name }}"
        namespace: "{{ target_namespace }}"
        definition:
          spec:
            operators:
            - channel: v3.21
              installPlanApproval: Automatic
              name: ibm-licensing-operator
              namespace: "{{ ics_namespace }}"
              packageName: ibm-licensing-operator-app
              scope: public
              sourceName: "{{ ics_operator_catalog_source }}"
              sourceNamespace: "{{ ics_operator_catalog_source_namespace }}"
            - channel: v3.21
              installPlanApproval: Automatic
              name: ibm-mongodb-operator
              namespace: "{{ ics_namespace }}"
              packageName: ibm-mongodb-operator-app
              sourceName: "{{ ics_operator_catalog_source }}"
              sourceNamespace: "{{ ics_operator_catalog_source_namespace }}"
            - channel: v3.21
              installPlanApproval: Automatic
              name: ibm-cert-manager-operator
              namespace: "{{ ics_namespace }}"
              packageName: ibm-cert-manager-operator
              scope: public
              sourceName: "{{ ics_operator_catalog_source }}"
              sourceNamespace: "{{ ics_operator_catalog_source_namespace }}"
            - channel: v3.21
              installPlanApproval: Automatic
              name: ibm-iam-operator
              namespace: "{{ ics_namespace }}"
              packageName: ibm-iam-operator
              scope: public
              sourceName: "{{ ics_operator_catalog_source }}"
              sourceNamespace: "{{ ics_operator_catalog_source_namespace }}"
            - channel: v3.21
              installPlanApproval: Automatic
              name: ibm-management-ingress-operator
              namespace: "{{ ics_namespace }}"
              packageName: ibm-management-ingress-operator-app
              scope: public
              sourceName: "{{ ics_operator_catalog_source }}"
              sourceNamespace: "{{ ics_operator_catalog_source_namespace }}"
            - channel: v3.21
              installPlanApproval: Automatic
              name: ibm-ingress-nginx-operator
              namespace: "{{ ics_namespace }}"
              packageName: ibm-ingress-nginx-operator-app
              scope: public
              sourceName: "{{ ics_operator_catalog_source }}"
              sourceNamespace: "{{ ics_operator_catalog_source_namespace }}"
            - channel: v3.21
              installPlanApproval: Automatic
              name: ibm-platform-api-operator
              namespace: "{{ ics_namespace }}"
              packageName: ibm-platform-api-operator-app
              scope: public
              sourceName: "{{ ics_operator_catalog_source }}"
              sourceNamespace: "{{ ics_operator_catalog_source_namespace }}"
            - channel: v3
              installPlanApproval: Automatic
              name: ibm-events-operator
              namespace: "{{ ics_namespace }}"
              packageName: ibm-events-operator
              scope: public
              sourceName: "{{ ics_operator_catalog_source }}"
              sourceNamespace: "{{ ics_operator_catalog_source_namespace }}"
            - channel: v3.21
              installPlanApproval: Automatic
              name: ibm-zen-operator
              namespace: "{{ ics_namespace }}"
              packageName: ibm-zen-operator
              scope: public
              sourceName: "{{ ics_operator_catalog_source }}"
              sourceNamespace: "{{ ics_operator_catalog_source_namespace }}"
      register: _result

    - name: Create the OperandConfig
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v1alpha1
        kind: OperandConfig
        kubeconfig: "{{ kubeconfig_path }}"
        name: common-service
        namespace: "{{ target_namespace }}"
        definition:
          spec:
            services:
            - name: ibm-licensing-operator
              spec:
                IBMLicensing:
                  datasource: datacollector
                  resources:
                    limits:
                      cpu: 200m
                      memory: 850Mi
                    requests:
                      cpu: 100m
                      memory: 430Mi
                operandBindInfo: {}
            - name: ibm-mongodb-operator
              spec:
                mongoDB:
                  metrics:
                    resources:
                      limits:
                        cpu: 1000m
                        memory: 350Mi
                      requests:
                        cpu: 100m
                        memory: 300Mi
                  replicas: 1
                  resources:
                    limits:
                      cpu: 1000m
                      memory: 640Mi
                    requests:
                      cpu: 500m
                      memory: 640Mi
                operandRequest: {}
            - name: ibm-cert-manager-operator
              spec:
                certManager:
                  certManagerCAInjector:
                    resources:
                      limits:
                        cpu: 100m
                        memory: 520Mi
                      requests:
                        cpu: 20m
                        memory: 410Mi
                  certManagerController:
                    resources:
                      limits:
                        cpu: 80m
                        memory: 530Mi
                      requests:
                        cpu: 20m
                        memory: 230Mi
                  certManagerWebhook:
                    resources:
                      limits:
                        cpu: 60m
                        memory: 100Mi
                      requests:
                        cpu: 30m
                        memory: 40Mi
            - name: ibm-iam-operator
              spec:
                operandRequest: {}
                secretwatcher:
                  replicas: 1
                  resources:
                    limits:
                      cpu: 1000m
                      memory: 145Mi
                    requests:
                      cpu: 20m
                      memory: 40Mi
                policycontroller:
                  replicas: 1
                  resources:
                    limits:
                      cpu: 1000m
                      memory: 60Mi
                    requests:
                      cpu: 20m
                      memory: 30Mi
                policydecision:
                  auditService:
                    resources:
                      limits:
                        cpu: 20m
                        memory: 40Mi
                      requests:
                        cpu: 10m
                        memory: 20Mi
                  replicas: 1
                  resources:
                    limits:
                      cpu: 1000m
                      memory: 50Mi
                    requests:
                      cpu: 70m
                      memory: 30Mi
                operandBindInfo:
                  bindings:
                    protected-zen-serviceid:
                      secret: zen-serviceid-apikey-secret
                oidcclientwatcher:
                  replicas: 1
                  resources:
                    limits:
                      cpu: 1000m
                      memory: 256Mi
                    requests:
                      cpu: 20m
                      memory: 34Mi
                authentication:
                  auditService:
                    resources:
                      limits:
                        cpu: 20m
                        memory: 40Mi
                      requests:
                        cpu: 10m
                        memory: 20Mi
                  authService:
                    resources:
                      limits:
                        cpu: 1000m
                        memory: 1090Mi
                      requests:
                        cpu: 600m
                        memory: 650Mi
                  clientRegistration:
                    resources:
                      limits:
                        cpu: 1000m
                        memory: 50Mi
                      requests:
                        cpu: 20m
                        memory: 50Mi
                  config:
                    onPremMultipleDeploy: false
                  identityManager:
                    resources:
                      limits:
                        cpu: 1000m
                        memory: 410Mi
                      requests:
                        cpu: 260m
                        memory: 240Mi
                  identityProvider:
                    resources:
                      limits:
                        cpu: 1000m
                        memory: 420Mi
                      requests:
                        cpu: 570m
                        memory: 250Mi
                  replicas: 1
                securityonboarding:
                  iamOnboarding:
                    resources:
                      limits:
                        cpu: 1000m
                        memory: 1024Mi
                      requests:
                        cpu: 20m
                        memory: 64Mi
                  replicas: 1
                  resources:
                    limits:
                      cpu: 1000m
                      memory: 50Mi
                    requests:
                      cpu: 20m
                      memory: 50Mi
                pap:
                  auditService:
                    resources:
                      limits:
                        cpu: 20m
                        memory: 40Mi
                      requests:
                        cpu: 10m
                        memory: 20Mi
                  papService:
                    resources:
                      limits:
                        cpu: 1000m
                        memory: 380Mi
                      requests:
                        cpu: 30m
                        memory: 190Mi
                  replicas: 1
            - name: ibm-management-ingress-operator
              spec:
                managementIngress:
                  replicas: 1
                  resources:
                    limits:
                      cpu: 1000m
                      memory: 170Mi
                    requests:
                      cpu: 70m
                      memory: 70Mi
                operandBindInfo: {}
                operandRequest: {}
            - name: ibm-ingress-nginx-operator
              spec:
                nginxIngress:
                  defaultBackend:
                    replicas: 1
                    resources:
                      limits:
                        cpu: 20m
                        memory: 50Mi
                      requests:
                        cpu: 10m
                        memory: 20Mi
                  ingress:
                    replicas: 1
                    resources:
                      limits:
                        cpu: 1000m
                        memory: 350Mi
                      requests:
                        cpu: 100m
                        memory: 110Mi
                  kubectl:
                    resources:
                      limits:
                        cpu: 30m
                        memory: 150Mi
                      requests:
                        cpu: 30m
                        memory: 150Mi
            - name: ibm-platform-api-operator
              spec:
                operandRequest: {}
                platformApi:
                  auditService:
                    resources:
                      limits:
                        cpu: 25m
                        memory: 50Mi
                      requests:
                        cpu: 20m
                        memory: 30Mi
                  platformApi:
                    resources:
                      limits:
                        cpu: 25m
                        memory: 50Mi
                      requests:
                        cpu: 20m
                        memory: 30Mi
                  replicas: 1
            - name: ibm-zen-operator
              resources:
                - apiVersion: batch/v1
                  data:
                    spec:
                      activeDeadlineSeconds: 600
                      backoffLimit: 5
                      template:
                        metadata:
                          annotations:
                            productID: 068a62892a1e4db39641342e592daa25
                            productMetric: FREE
                            productName: IBM Cloud Platform Common Services
                        spec:
                          affinity:
                            nodeAffinity:
                              requiredDuringSchedulingIgnoredDuringExecution:
                                nodeSelectorTerms:
                                - matchExpressions:
                                  - key: kubernetes.io/arch
                                    operator: In
                                    values:
                                    - amd64
                                    - ppc64le
                                    - s390x
                          containers:
                          - command:
                            - bash
                            - '-c'
                            - bash /setup/pre-zen.sh
                            env:
                            - name: common_services_namespace
                              valueFrom:
                                fieldRef:
                                  fieldPath: metadata.namespace
                            image: >-
                              icr.io/cpopen/ibm-zen-operator@sha256:92984f1c7f2600ed3f958f08eb03b617a2ed68850555a80a764dabef4cca4b5e
                            name: pre-zen-job
                            resources:
                              limits:
                                cpu: 500m
                                memory: 512Mi
                              requests:
                                cpu: 100m
                                memory: 50Mi
                            securityContext:
                              allowPrivilegeEscalation: false
                              capabilities:
                                drop:
                                - ALL
                              privileged: false
                              readOnlyRootFilesystem: false
                          restartPolicy: OnFailure
                          securityContext:
                            runAsNonRoot: true
                          serviceAccount: operand-deployment-lifecycle-manager
                          serviceAccountName: operand-deployment-lifecycle-manager
                          terminationGracePeriodSeconds: 30
                  force: true
                  kind: Job
                  name: pre-zen-operand-config-job
      register: _result

- when: true
  name: Create all operand requests
  block:

    - name: Create the cert-manager OperandRequest
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v1alpha1
        kind: OperandRequest
        kubeconfig: "{{ kubeconfig_path }}"
        name: operand-request-cert-manager
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              ibm-common-services.common-service/config: 'true'
              ibm-common-services.common-service/registry: 'true'
              operator.ibm.com/opreq-control: 'true'
          spec:
            requests:
            - operands:
              - name: ibm-cert-manager-operator
              registry: "{{ ics_operand_registry_name }}"
        wait: true
        wait_condition:
          type: Ready
        wait_sleep: 20
        wait_timeout: 300
      register: _result

    - name: Create the management-ingress OperandRequest
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v1alpha1
        kind: OperandRequest
        kubeconfig: "{{ kubeconfig_path }}"
        name: operand-request-management-ingress
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              ibm-common-services.common-service/config: 'true'
              ibm-common-services.common-service/registry: 'true'
              operator.ibm.com/opreq-control: 'true'
          spec:
            requests:
            - operands:
              - name: ibm-management-ingress-operator
              registry: "{{ ics_operand_registry_name }}"
        wait: true
        wait_condition:
          type: Ready
        wait_sleep: 20
        wait_timeout: 300
      register: _result

    - name: Create the mongodb OperandRequest
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v1alpha1
        kind: OperandRequest
        kubeconfig: "{{ kubeconfig_path }}"
        name: operand-request-mongodb
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              ibm-common-services.common-service/config: 'true'
              ibm-common-services.common-service/registry: 'true'
              operator.ibm.com/opreq-control: 'true'
          spec:
            requests:
            - operands:
              - name: ibm-mongodb-operator
              registry: "{{ ics_operand_registry_name }}"
        wait: true
        wait_condition:
          type: Ready
        wait_sleep: 20
        wait_timeout: 300
      register: _result

    - name: Create the ingress-nginx OperandRequest
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v1alpha1
        kind: OperandRequest
        kubeconfig: "{{ kubeconfig_path }}"
        name: operand-request-ingress-nginx
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              ibm-common-services.common-service/config: 'true'
              ibm-common-services.common-service/registry: 'true'
              operator.ibm.com/opreq-control: 'true'
          spec:
            requests:
            - operands:
              - name: ibm-ingress-nginx-operator
              registry: "{{ ics_operand_registry_name }}"
        wait: true
        wait_condition:
          type: Ready
        wait_sleep: 20
        wait_timeout: 300
      register: _result

    - name: Create the IAM OperandRequest
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v1alpha1
        kind: OperandRequest
        kubeconfig: "{{ kubeconfig_path }}"
        name: operand-request-iam
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              ibm-common-services.common-service/config: 'true'
              ibm-common-services.common-service/registry: 'true'
              operator.ibm.com/opreq-control: 'true'
          spec:
            requests:
            - operands:
              - name: ibm-iam-operator
              registry: "{{ ics_operand_registry_name }}"
        wait: true
        wait_condition:
          type: Ready
        wait_sleep: 20
        wait_timeout: 300
      register: _result

    - name: Create the platform-api OperandRequest
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v1alpha1
        kind: OperandRequest
        kubeconfig: "{{ kubeconfig_path }}"
        name: operand-request-platform-api
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              ibm-common-services.common-service/config: 'true'
              ibm-common-services.common-service/registry: 'true'
              operator.ibm.com/opreq-control: 'true'
          spec:
            requests:
            - operands:
              - name: ibm-platform-api-operator
              registry: "{{ ics_operand_registry_name }}"
        wait: true
        wait_condition:
          type: Ready
        wait_sleep: 20
        wait_timeout: 300
      register: _result

    - name: Create the commonuiOperandRequest
      kubernetes.core.k8s:
        api_key: "{{ api_key }}"
        api_version: operator.ibm.com/v1alpha1
        kind: OperandRequest
        kubeconfig: "{{ kubeconfig_path }}"
        name: operand-request-commonui
        namespace: "{{ target_namespace }}"
        definition:
          metadata:
            labels:
              ibm-common-services.common-service/config: 'true'
              ibm-common-services.common-service/registry: 'true'
              operator.ibm.com/opreq-control: 'true'
          spec:
            requests:
            - operands:
              - name: ibm-commonui-operator
              registry: "{{ ics_operand_registry_name }}"
        wait: true
        wait_condition:
          type: Ready
        wait_sleep: 20
        wait_timeout: 300
      register: _result

- when: true
  name: Wait for all IAM onboarding jobs
  block:

    - name: Wait for IAM onboarding jobs to complete
      kubernetes.core.k8s_info:
        api_key: "{{ api_key }}"
        kind: Job
        kubeconfig: "{{ kubeconfig_path }}"
        name: "{{ item }}"
        namespace: "{{ target_namespace }}"
        wait: true
        wait_condition:
          type: Complete
        wait_sleep: 20
        wait_timeout: 900
      loop:
      - security-onboarding
      - iam-onboarding
      - oidc-client-registration
      register: _result

- when: true
  name: Wait for all ibm-common-services CSVs to succeed
  block:

    - name: Wait until all the ibm-common-services CSV succeed
      kubernetes.core.k8s_info:
        api_key: "{{ api_key }}"
        api_version: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: "{{ ics_namespace }}"
      register: _result
      delay: 30
      retries: 120
      until: (_result.resources | length > 0) and (_result.resources | map(attribute='status.phase') | unique == ['Succeeded'])
