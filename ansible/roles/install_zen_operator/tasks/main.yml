---

- name: Create the zen OperandRequest
  kubernetes.core.k8s:
    api_key: "{{ api_key }}"
    api_version: operator.ibm.com/v1alpha1
    kind: OperandRequest
    kubeconfig: "{{ kubeconfig_path }}"
    name: operand-request-zen
    namespace: "{{ target_namespace }}"
    definition:
      metadata:
        labels:
          ibm-common-services.common-service/config: 'true'
          ibm-common-services.common-service/registry: 'true'
          operator.ibm.com/opreq-control: 'true'
      spec:
        requests:
        - operands:
          - name: ibm-zen-operator
          registry: common-service
          registryNamespace: "{{ registry_namespace }}"
    wait: true
    wait_condition:
      type: Ready
    wait_sleep: 20
    wait_timeout: 300
  register: _result

- name: Create ZenService instance
  kubernetes.core.k8s:
    api_key: "{{ api_key }}"
    api_version: zen.cpd.ibm.com/v1
    kind: ZenService
    kubeconfig: "{{ kubeconfig_path }}"
    name: websphereauto
    namespace: "{{ target_namespace }}"
    definition:
      spec:
        csNamespace: "{{ registry_namespace }}"
        iamIntegration: true
        scaleConfig: small
        storageClass: csi-cephfs
    wait: true
    wait_condition:
      type: Successful
    wait_sleep: 60
    wait_timeout: 1800
  register: _result

- name: Wait for ZenService to reach zenStatus of Completed
  kubernetes.core.k8s_info:
    api_key: "{{ api_key }}"
    api_version: zen.cpd.ibm.com/v1
    kind: ZenService
    kubeconfig: "{{ kubeconfig_path }}"
    name: websphereauto
    namespace: "{{ target_namespace }}"
  register: _result
  delay: 30
  retries: 120
  until: _result.resources | map(attribute='status.zenStatus') | unique == ['Completed']
